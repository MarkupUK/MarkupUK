fil = new Array();
fil["0"]= "PageSetup.html@@@Page Setting@@@...";
fil["1"]= "Pagerule.html@@@@page Rule@@@...";
fil["2"]= "StringSet.html@@@Variable strings : string-set property@@@...";
fil["3"]= "appendix-a.html@@@Appendix A@@@...";
fil["4"]= "ar01.html@@@Shared Tag Sets as Social Constructs@@@...";
fil["5"]= "ar01s01.html@@@Introduction@@@...";
fil["6"]= "ar01s02.html@@@From the Mouth of a Novice@@@...";
fil["7"]= "ar01s03.html@@@The Bare Bones XML specification@@@...";
fil["8"]= "ar01s04.html@@@Advantages of Shared Vocabularies@@@...";
fil["9"]= "ar01s04s01.html@@@Of course All is not sweetness and light@@@...";
fil["10"]= "ar01s04s02.html@@@Mixing Vocabularies (by cut and paste not namespaces)@@@...";
fil["11"]= "ar01s04s03.html@@@Natural/Intuitive Tagging (Influences of Shared Vocabularies on Thinking)@@@...";
fil["12"]= "ar01s05.html@@@Shared Wisdom: the culture and practice of XML@@@...";
fil["13"]= "ar01s05s01.html@@@Tag Set Cultures@@@...";
fil["14"]= "ar01s05s02.html@@@Different use cases make for different cultures@@@...";
fil["15"]= "ar01s05s03.html@@@Community coercion: All is still not sweetness and light@@@...";
fil["16"]= "ar01s05s04.html@@@But ...@@@...";
fil["17"]= "ar01s06.html@@@Conclusion@@@...";
fil["18"]= "ar02.html@@@How to Make a Flying Start with S1000D \u2013 Lessons Learned at the Airport@@@S1000D is a specification for tech pubs which has been broadly adopted in the aerospace industry. It provides XML schemas for common doc types and defines how these documents should be structured in a common source database. S1000D is replacing the ATA SGML format as the primary spec for OEM aircraft manuals and is used for new aircraft such as the Boeing 787 and Airbus A350. At the same time, mobile devices are playing an increasing role in aircraft maintenance, allowing engineers to access technical information at the point of need. Airlines are pressured to keep fares low but still maintain the highest safety standards. A single source for engineering content is one way to reduce overheads. It follows that other documents for engineers should also be S1000D to allow common tools for managing and rendering content. This paper discusses implementing S1000D for a major UK airline\u2019s engineering procedures. While OEM manuals cover much information needed by engineers, airlines still need their own procedures for topics like health and safety, planning and quality control. In fact, to cover all aspects of keeping aircraft functioning safely and comfortably for passengers. S1000D can be daunting for the inexperienced though. The version 4.1 spec is over 3500 pages long and not an easy read. There is a shortage of S1000D information in the public domain, perhaps because it is still quite new, the majority of aircraft manuals are still in SGML and the industry is understandably cautious about change. Of course, you could skip the spec and start creating some S1000D schema compliant XML, only referring to it when you hit a snag. This is a very bad idea. By this time, you will likely have created a number of problems for yourself which will be hard to unwind. This paper will explain some of the design decisions you need to make before going anywhere near a keyboard and hopefully save you from some of the pain that you will inevitably experience...";
fil["19"]= "ar02s01.html@@@Introduction to S1000D@@@...";
fil["20"]= "ar02s01s01.html@@@What is S1000D?@@@...";
fil["21"]= "ar02s01s02.html@@@History@@@...";
fil["22"]= "ar02s01s03.html@@@Principal Concepts@@@...";
fil["23"]= "ar02s01s03s01.html@@@Data Modules@@@...";
fil["24"]= "ar02s01s03s02.html@@@Publication Modules@@@...";
fil["25"]= "ar02s01s03s03.html@@@Common Source Database@@@...";
fil["26"]= "ar02s02.html@@@Introduction to the Knowledge Warehouse Project@@@...";
fil["27"]= "ar02s03.html@@@Migration Planning@@@...";
fil["28"]= "ar02s03s01.html@@@Data Modules@@@...";
fil["29"]= "ar02s03s01s01.html@@@The Data Module Code@@@...";
fil["30"]= "ar02s03s01s02.html@@@Model Identification Code@@@...";
fil["31"]= "ar02s03s01s03.html@@@System Difference Code@@@...";
fil["32"]= "ar02s03s01s04.html@@@Standard Numbering System@@@...";
fil["33"]= "ar02s03s01s05.html@@@Other Codes@@@...";
fil["34"]= "ar02s03s01s06.html@@@Putting It All Together@@@...";
fil["35"]= "ar02s03s02.html@@@Data Module Title@@@...";
fil["36"]= "ar02s04.html@@@Publication Modules@@@...";
fil["37"]= "ar02s04s01.html@@@The Publication Module Code@@@...";
fil["38"]= "ar02s04s01s01.html@@@Model Identification Code@@@...";
fil["39"]= "ar02s04s01s02.html@@@Issuing Authority@@@...";
fil["40"]= "ar02s04s01s03.html@@@Publication Number@@@...";
fil["41"]= "ar02s04s01s04.html@@@Volume Number@@@...";
fil["42"]= "ar02s04s01s05.html@@@Putting It All Together@@@...";
fil["43"]= "ar02s04s02.html@@@Publication Module Entry Title@@@...";
fil["44"]= "ar02s05.html@@@Business Rules@@@...";
fil["45"]= "ar02s05s01.html@@@Business Rule Decision Points@@@...";
fil["46"]= "ar02s05s02.html@@@Business Rules Exchange (BREX)@@@...";
fil["47"]= "ar02s05s02s01.html@@@Context Rules@@@...";
fil["48"]= "ar02s05s02s02.html@@@Context Independent Rules@@@...";
fil["49"]= "ar02s05s02s03.html@@@SNS Rules@@@...";
fil["50"]= "ar02s06.html@@@Lessons Learned@@@...";
fil["51"]= "ar02s06s01.html@@@Spreadsheet It!@@@...";
fil["52"]= "ar02s06s02.html@@@Hearts and Minds@@@...";
fil["53"]= "ar02s07.html@@@Conclusion@@@...";
fil["54"]= "ar03.html@@@Two (and a half) models for markup of bibliographic references@@@This paper describes two models for semantic markup of bibliographic references, their advantages and disadvantages, and the challenges of automating a conversion from one format to the other. In one format a reference is captured as plain text. The semantic markup (author name, title, publication date, etc) is captured in attributes on the element containing the reference text. The other format is BITS, where each component of a reference is captured in its own element. The BITS model comes in two flavours, &lt;element-citation&gt; and &lt;mixed-citation&gt;, hence the extra half a model in the title. The conversion to BITS needs to support OpenURL linking and the Initiative for Open Citations (I4OC)...";
fil["55"]= "ar03s01.html@@@Background@@@...";
fil["56"]= "ar03s02.html@@@Bibliographic reference formats@@@...";
fil["57"]= "ar03s03.html@@@Online functionality of bibliographic references@@@...";
fil["58"]= "ar03s04.html@@@OUP data model@@@...";
fil["59"]= "ar03s05.html@@@BITS data model@@@...";
fil["60"]= "ar03s06.html@@@Converting the OUP data model to BITS@@@...";
fil["61"]= "ar03s07.html@@@Outline of the XSLT@@@...";
fil["62"]= "ar03s08.html@@@Limitations of the conversion@@@...";
fil["63"]= "ar04.html@@@The Cryptic Crossword Corpus Project: first steps in establishing a markup vocabulary@@@In a quick crossword, the relationship between clue and answer is usually simply definitional: the clue offers a definition or description of, or a synonym for, the answer. In a cryptic crossword, the relationship between clue and answer is significantly more complex, and may be one of many types. Anagrams, puns, hidden words, deletions, reversals, and other techniques are used, often in combination. Every word in a clue does one of three jobs: a) defining the answer (a synonym or definition of the answer word(s)); b) producing part or all of the answer word; or c) indicating how the words in b) are to be manipulated. It follows that each part of an answer will relate back to one or more words in the clue from category b), while the whole answer will relate to the word(s) in category a). This paper describes the early work of creating a markup scheme which relates each part of a cryptic crossword clue to the relevant part of its answer, as well as giving full linguistic detail for each word. The aim of this project is to create a corpus of cryptic clues and answers which can be explored to answer linguistic questions...";
fil["64"]= "ar04s01.html@@@Introduction@@@...";
fil["65"]= "ar04s02.html@@@A brief explanation of cryptic crosswords@@@...";
fil["66"]= "ar04s03.html@@@Developing the markup vocabulary for CCCP@@@...";
fil["67"]= "ar04s04.html@@@Conclusion@@@...";
fil["68"]= "ar05.html@@@Modern amendment drafting - The road to XML@@@This paper reports on an experiment to build a system which aids in the drafting of amendment documents. The system provides a mechanism to help validate the correctness of amendments. Furthermore, the system is able to semi-automatically sort the amendments in voting order and simulate the effects of amendments on the law. The proposed implementation is based on XML technology, an XML editor and machine learning...";
fil["69"]= "ar05s01.html@@@Context@@@...";
fil["70"]= "ar05s02.html@@@Introduction@@@...";
fil["71"]= "ar05s02s01.html@@@Validating amendments@@@...";
fil["72"]= "ar05s02s02.html@@@Ordering amendments@@@...";
fil["73"]= "ar05s02s03.html@@@Simulation@@@...";
fil["74"]= "ar05s03.html@@@Problem definitions@@@...";
fil["75"]= "ar05s04.html@@@Implementation@@@...";
fil["76"]= "ar05s04s01s01.html@@@Linear Chain Conditional Random Fields (CRF)@@@...";
fil["77"]= "ar05s04s01s02.html@@@Model description@@@...";
fil["78"]= "ar05s05.html@@@Human in the loop@@@...";
fil["79"]= "ar05s06.html@@@Conclusions and further work@@@...";
fil["80"]= "ar06.html@@@Introduction to CSS for Paged Media@@@CSS can be used for making pages as well as for styling websites. Many people are familiar with CSS in the browser: some are very familiar, but others, not so much. Fewer people, however, are as familiar with using CSS for paged media. This paper introduces some of the key features of CSS for paged media, including: differences between screen and paged media; sizing and selecting pages; headers and footers; PDF output and PDF accessibility features; printing colour; and numbering pages. This material is adapted from a more comprehensive tutorial that is available online...";
fil["81"]= "ar06s01.html@@@Introduction@@@...";
fil["82"]= "ar06s02.html@@@Web and Paged Media@@@...";
fil["83"]= "ar06s02s01.html@@@@media Rule@@@...";
fil["84"]= "ar06s02s02.html@@@Specifying a Print Style Sheet@@@...";
fil["85"]= "ar06s02s02s01.html@@@&lt;style&gt; Element@@@...";
fil["86"]= "ar06s02s02s02.html@@@@import Rule@@@...";
fil["87"]= "ar06s02s02s03.html@@@Media attribute of &lt;style&gt; and &lt;link&gt; elements@@@...";
fil["88"]= "ar06s02s03.html@@@Differences Between Screen and Paged Media@@@...";
fil["89"]= "ar06s02s03s01.html@@@Design approach@@@...";
fil["90"]= "ar06s02s03s02.html@@@Breaks@@@...";
fil["91"]= "ar06s02s03s03.html@@@Floats@@@...";
fil["92"]= "ar06s02s03s04.html@@@Navigation@@@...";
fil["93"]= "ar06s02s03s05.html@@@Left and right pages@@@...";
fil["94"]= "ar06s02s03s06.html@@@The printed book@@@...";
fil["95"]= "ar06s03s01.html@@@Western Page Design@@@...";
fil["96"]= "ar06s03s02.html@@@Japanese Page Design@@@...";
fil["97"]= "ar06s03s04.html@@@Named Page : page property@@@...";
fil["98"]= "ar06s03s05.html@@@Crop and Registration Marks@@@...";
fil["99"]= "ar06s03s05s01.html@@@Page bleed area@@@...";
fil["100"]= "ar06s04.html@@@Headers and Footers@@@...";
fil["101"]= "ar06s04s01.html@@@Margin Boxes@@@...";
fil["102"]= "ar06s04s02.html@@@Running Headers and Page Numbers@@@...";
fil["103"]= "ar06s04s02s01.html@@@Running header setting : string-set property and string() function@@@...";
fil["104"]= "ar06s04s02s03.html@@@string()@@@...";
fil["105"]= "ar06s04s02s04.html@@@Move elements to header/footer : running() position value@@@...";
fil["106"]= "ar06s04s02s05.html@@@Insert a running element: element()@@@...";
fil["107"]= "ar06s04s02s06.html@@@Page number : counter(page)@@@...";
fil["108"]= "ar06s04s02s07.html@@@Total pages : counter(pages)@@@...";
fil["109"]= "ar06s04s03.html@@@Left and Right Page Headers: :left and :right@@@...";
fil["110"]= "ar06s04s04.html@@@Last and only pages: :last and :only@@@...";
fil["111"]= "ar06s05.html@@@PDF Output@@@...";
fil["112"]= "ar06s05s01.html@@@PDF versions@@@...";
fil["113"]= "ar06s05s02.html@@@Tagged PDF@@@...";
fil["114"]= "ar06s05s03.html@@@PDF/UA@@@...";
fil["115"]= "ar06s05s03s01.html@@@Matterhorn Protocol@@@...";
fil["116"]= "ar06s05s03s02.html@@@PAC 3 PDF/UA checker@@@...";
fil["117"]= "ar06s05s04.html@@@Document properties@@@...";
fil["118"]= "ar06s05s04s01.html@@@Extensible Metadata Platform (XMP)@@@...";
fil["119"]= "ar06s06.html@@@Colour Specification@@@...";
fil["120"]= "ar06s06s01.html@@@Printing colour@@@...";
fil["121"]= "ar06s06s02.html@@@Text Colour : color property@@@...";
fil["122"]= "ar06s06s02s01.html@@@CMYK colours@@@...";
fil["123"]= "ar06s06s02s02.html@@@Opacity@@@...";
fil["124"]= "ar06s06s02s03.html@@@rgb-icc()@@@...";
fil["125"]= "ar06s06s02s04.html@@@Grayscale@@@...";
fil["126"]= "ar06s06s02s05.html@@@PANTONE\u00AE spot colours@@@...";
fil["127"]= "ar06s06s02s06.html@@@Other spot colours@@@...";
fil["128"]= "ar06s07.html@@@Counters@@@...";
fil["129"]= "ar06s07s01.html@@@Numbering Chapters and Sections@@@...";
fil["130"]= "ar06s07s02.html@@@Inserting Characters : content property@@@...";
fil["131"]= "ar06s07s03.html@@@Incrementing Counters : counter-increment property@@@...";
fil["132"]= "ar06s07s04.html@@@Counter Reset : counter-reset property@@@...";
fil["133"]= "ar06s07s05.html@@@Page counter@@@...";
fil["134"]= "ar06s08.html@@@Lists@@@...";
fil["135"]= "ar06s08s01.html@@@Counter styles@@@...";
fil["136"]= "ar06s08s02.html@@@Defining Custom Counter Styles : @counter-style rule@@@...";
fil["137"]= "ar06s08s03.html@@@Predefined Counter Styles@@@...";
fil["138"]= "ar07.html@@@The Wolfenb\u00FCttel emblem2rdf Pipeline@@@The project &quot;Emblematica Online \u2013 Linked Open Emblem Data&quot; set out to publish the Wolfenb\u00FCttel collection of emblem books as a resource for digital emblem studies. At the end we managed to publish information about approximately 12300 emblems and 220 emblem books. After a short introduction into the field of digital emblem studies at the Herzog August Bibliothek Wolfenb\u00FCttel the article presents the challenges we faced when working with XML encoded information that dates back to the beginnings of web and the infancy of today&apos;s Digital Humanities, the solutions we employed to tackle these problems and how we ended up implementing a publication pipeline implemented in XProc. Some of the topics I like to discuss are missing documentation and schema validation, legacy technology (i.e. DTD), the creative use of XML specifications, and the benefits of XProc as a declarative language for XML processing pipelines that allowed us to quickly iterate possible solutions...";
fil["139"]= "ar07s01.html@@@Introduction@@@...";
fil["140"]= "ar07s02.html@@@Emblematica Online \u2013 Linked Open Emblem Data@@@...";
fil["141"]= "ar07s02s01.html@@@Encoding emblems@@@...";
fil["142"]= "ar07s02s02.html@@@The publication process as XProc pipeline@@@...";
fil["143"]= "ar07s02s02s01.html@@@Data entry and initial transformation@@@...";
fil["144"]= "ar07s02s02s02.html@@@TEI to Emblem Schema@@@...";
fil["145"]= "ar07s02s02s03.html@@@Emblem Schema documents@@@...";
fil["146"]= "ar07s02s03.html@@@Running the emblem2rdf pipeline@@@...";
fil["147"]= "ar07s03.html@@@Summary@@@...";
fil["148"]= "ar08.html@@@CREPDL: Protect Yourself from the Proliferation of Unicode Characters@@@This paper studies machine-readable notations for describing subsets of Unicode or ISO/IEC 10646. Unicode regular expressions can describe any subset, but they have performance problems for huge subsets and cannot directly capture subsets defined in terms of other subsets. Meanwhile, the upcoming second edition of ISO/IEC 19757-7 Character Repertoire Description Language (CREPDL) overcomes these problems by providing references to well-known subsets and external CREPDL scripts...";
fil["149"]= "ar08s01.html@@@Introduction@@@...";
fil["150"]= "ar08s03s01.html@@@Collections@@@...";
fil["151"]= "ar08s03s01s01.html@@@Code Points and Ranges@@@...";
fil["152"]= "ar08s03s01s02.html@@@Open Collections and Fixed Collections@@@...";
fil["153"]= "ar08s03s01s03.html@@@References to Other Collections@@@...";
fil["154"]= "ar08s03s01s04.html@@@Grapheme Clusters@@@...";
fil["155"]= "ar08s03s01s05.html@@@User-defined Subsets@@@...";
fil["156"]= "ar08s04s01.html@@@Unicode Regular Expressions@@@...";
fil["157"]= "ar08s04s01s01.html@@@Referencing other subsets@@@...";
fil["158"]= "ar08s04s01s02.html@@@Performance@@@...";
fil["159"]= "ar08s04s02.html@@@A Notation for Character Collections for the WWW@@@...";
fil["160"]= "ar08s05s01.html@@@Language Design@@@...";
fil["161"]= "ar08s05s02.html@@@Implementation@@@...";
fil["162"]= "ar08s06.html@@@Concluding Remarks and Future Works@@@...";
fil["163"]= "ar09.html@@@Rethinking transformation \u2013 the potential of code generation@@@A code generator for document to document transformation is introduced. It reduces the development effort to editing a set of metadata items attached to a tree model of the target documents. Metadata values are XQuery expressions which are typically so simple that they do not require genuine programming skills. Nevertheless, expressions are more difficult to provide than static values, and therefore possibilities of further simplifying the development task are explored, striving to enable subject matter experts to define the transformation without writing XQuery expressions. This can be achieved by generating the expressions from assertions about alignments between source and target nodes, although specific requirements will often necessitate additional information. As alignments can be represented graphically by connecting lines, the approach amounts to a solid conceptual foundation for graphical mapping tools. Finally, the underlying model of code generation driven by target document structure is generalized into a conceptual framework which is not restricted to XML data sources. Its usefulness is demonstrated by a simple code generator for transforming RDF data into XML documents...";
fil["164"]= "ar09s01.html@@@Introduction@@@...";
fil["165"]= "ar09s02.html@@@Rethinking document-to-document transformation@@@...";
fil["166"]= "ar09s03.html@@@Source navigation based model@@@...";
fil["167"]= "ar09s03s01.html@@@Basic concepts@@@...";
fil["168"]= "ar09s03s02.html@@@Primitive operations@@@...";
fil["169"]= "ar09s03s03.html@@@Composing document-to-document transformation@@@...";
fil["170"]= "ar09s04s01.html@@@Metadata item model@@@...";
fil["171"]= "ar09s04s02.html@@@Advanced features@@@...";
fil["172"]= "ar09s04s02s01.html@@@Value mappings@@@...";
fil["173"]= "ar09s04s02s02.html@@@User-defined functions@@@...";
fil["174"]= "ar09s04s02s03.html@@@User-defined variables@@@...";
fil["175"]= "ar09s05s01.html@@@What is an alignment?@@@...";
fil["176"]= "ar09s05s02.html@@@Representation versus information@@@...";
fil["177"]= "ar09s05s03.html@@@Annotated target tree (SAAT)@@@...";
fil["178"]= "ar09s05s04.html@@@Mapping alignments to navigation@@@...";
fil["179"]= "ar09s05s05.html@@@Inferring context propagation@@@...";
fil["180"]= "ar09s05s06.html@@@Semantic versus structural relationships@@@...";
fil["181"]= "ar09s05s07.html@@@Shortest-path-principle@@@...";
fil["182"]= "ar09s05s08.html@@@Future work@@@...";
fil["183"]= "ar09s06.html@@@Metadata model SAAT (Source Alignment Annotated Target tree)@@@...";
fil["184"]= "ar09s06s01.html@@@Minimal SAAT@@@...";
fil["185"]= "ar09s06s02.html@@@Alignment qualifiers@@@...";
fil["186"]= "ar09s06s03.html@@@Code generator SAAT@@@...";
fil["187"]= "ar09s07.html@@@AT Map Machine@@@...";
fil["188"]= "ar09s07s01.html@@@Does SNAT presuppose XML?@@@...";
fil["189"]= "ar09s07s02.html@@@Does SAAT presuppose XML?@@@...";
fil["190"]= "ar09s07s03.html@@@Scheme for building SNAT-based code generators@@@...";
fil["191"]= "ar09s07s03s01.html@@@Metadata item model@@@...";
fil["192"]= "ar09s07s03s02.html@@@Metadata value model@@@...";
fil["193"]= "ar09s07s03s03.html@@@Code assembly model@@@...";
fil["194"]= "ar09s07s04.html@@@Using SNAT as a meta model@@@...";
fil["195"]= "ar09s08.html@@@Proof of concept: RDF-to-XML, SNAT-based@@@...";
fil["196"]= "ar09s08s01.html@@@Metadata item model@@@...";
fil["197"]= "ar09s08s02.html@@@Metadata value model@@@...";
fil["198"]= "ar09s08s03.html@@@Code assembly model@@@...";
fil["199"]= "ar09s08s04.html@@@Example SNAT and source code@@@...";
fil["200"]= "ar10.html@@@Non-XML workflows with XProc 3.0@@@While XProc\u00A01.0 is an XML-centric workflow language, XProc\u00A03.0 attempts to overcome this restriction and to allow non-XML documents to flow between the steps of a pipeline. The intention for this change is not to make XProc a general purpose workflow language, but to enable pipeline authors to cover problems typically connected to XML processing. Although XProc\u00A03.0 is still work in progress, this paper will present and comment its current concepts for processing non-XML documents. The main focus of this paper is to evaluate in a practical example, how a non-XML workflow which fits every day needs of pipeline authors can be developed in XProc\u00A03.0 . The discussed use case deals with non-XML documents, that often appear in XML-related workflows such as zipped archives, ePUBs, images and JSON...";
fil["201"]= "ar10s01.html@@@Introduction@@@...";
fil["202"]= "ar10s02.html@@@Reprise: Non-XML documents in XProc\u00A01.0@@@...";
fil["203"]= "ar10s03.html@@@XProc\u00A03.0&apos;s new concept of a document@@@...";
fil["204"]= "ar10s04.html@@@Applying the model@@@...";
fil["205"]= "ar10s05.html@@@Conclusions@@@...";
fil["206"]= "ar11.html@@@Lightweight XML DevOps using Apache Ant@@@Many teams struggle with defining, documenting and following proper processes. A case study is described where the content delivery team of a major digital publisher was experiencing these problems when running transformation pipelines using XSLT and Schematron, as well as numerous other XML related tasks. The use of the Apache Ant build tool has allowed them to create a set of higher level tools that to enforce an agreed development policy using a set of reusable macros. These macros have allowed the team to dramatically increase the quality of deployed code, as well as improving the ability of new team members to become productive more quickly. This experience has spurred the development of an open source equivalent of this macro library (whimsically entitled &quot;XPantS&quot;) which is also described...";
fil["207"]= "ar12.html@@@An XSD 1.1 Schema Validator Written in XSLT 3.0@@@The paper describes an implementation of an XML Schema validator written entirely in XSLT 3.0. The main benefit of doing this is that the validator becomes available on any platform where XSLT 3.0 is implemented. At the same time, the experiment provides a valuable test of the performance and usability of an XSLT 3.0 implementation, and the experience gained from writing this application can feed back improvements to the XSLT processor that will benefit a large range of applications...";
fil["208"]= "ar12s01.html@@@Introduction@@@...";
fil["209"]= "ar12s02.html@@@The Validation Task@@@...";
fil["210"]= "ar12s03.html@@@Design Considerations@@@...";
fil["211"]= "ar12s03s01.html@@@Generic Stylesheet or Generated Stylesheet?@@@...";
fil["212"]= "ar12s03s02.html@@@Subset of XSLT 3.0@@@...";
fil["213"]= "ar12s03s03.html@@@Streaming@@@...";
fil["214"]= "ar12s03s04.html@@@Typed data@@@...";
fil["215"]= "ar12s03s05.html@@@Support for xsi:schemaLocation@@@...";
fil["216"]= "ar12s04.html@@@Implementation@@@...";
fil["217"]= "ar12s04s01.html@@@Use of Maps for Returned Values@@@...";
fil["218"]= "ar12s04s02.html@@@Declaring Map Types@@@...";
fil["219"]= "ar12s04s03.html@@@Assessment against Complex Types using Finite State Machines@@@...";
fil["220"]= "ar12s04s04.html@@@Checking Assertions@@@...";
fil["221"]= "ar12s04s05.html@@@Other Complications@@@...";
fil["222"]= "ar12s05.html@@@Results@@@...";
fil["223"]= "ar12s05s01.html@@@Conformance@@@...";
fil["224"]= "ar12s05s02.html@@@Usability@@@...";
fil["225"]= "ar12s05s03.html@@@Performance@@@...";
fil["226"]= "ar12s06.html@@@Conclusions@@@...";
fil["227"]= "ar13.html@@@When Overlapping XML Meets Changing XML Does Confusion Reign?@@@The issue of how best to represent overlapping hierarchy in XML has been the topic of a number of papers over the years. This paper is a further contribution to this important issue, but approaching the problem from a different direction. Our goal is to represent changes to documents, and one type of change is change to the markup hierarchy. Therefore our ultimate goal is to be able to represent not only changes to the hierarchy, typically resulting in overlapping hierarchy, but also changes to attributes and text. This is a more ambitious goal than simply representing overlapping hierarchy, and one aspect of this is to make a clear distinction between the different hierarchical structures and the text that corresponds with each one. Our work started with a delta format for two or more documents, which easily represents inline changes, but handles hierarchy change by duplicating content. In order to avoid duplication, we introduce a distinction between the name of the element (its tag) and the element content, so that assertions can be made separately. We then introduce @dx (change) and @dxTag (change tag) attributes to mark changes. This representation allows us to define overlapping hierarchies in a completely XML way without declaring a dominant hierarchy and while keeping element fragmentation to a minimum. While this solution probably will not scale for large numbers of variants, it shows promise for many classes of documents...";
fil["228"]= "ar13s01.html@@@Introduction and Background@@@...";
fil["229"]= "ar13s02.html@@@How Content Duplication Represents Any Change@@@...";
fil["230"]= "ar13s03.html@@@Representing Structural Change without Content Duplication@@@...";
fil["231"]= "ar13s04.html@@@Dominant Hierarchy@@@...";
fil["232"]= "ar13s05.html@@@Attributes@@@...";
fil["233"]= "ar13s06.html@@@Processing Observations@@@...";
fil["234"]= "ar13s07.html@@@Conclusions@@@...";
fil["235"]= "ar14.html@@@The XForms 2.0 Test Suite@@@XForms 1.0 and 1.1 both had test suites that consisted largely of static XForms documents. To run the tests you had to manually activate them one by one, and then visually confirm that the output matched the description of what should have been produced. If you wanted to add more cases to a test, it involved adding to the set of documents, or editing the individual documents. The test suite for XForms 2.0 now being constructed takes a different approach, the idea being that the tests should check themselves that they have passed; most tests have a similar structure so that only the data used needs to be altered to check new cases. Of course, for a language designed for user-interaction, some tests have to be based on physical interaction. But once you have confirmed that clicking on a button does indeed generate the activation event, all subsequent tests can generate the activation event without user intervention. The introspection needed for tests to check the workings of the processor doing the testing can raise some challenging problems, such as how to test that the initial start-up event has been sent when the facilities for recording that fact have not yet been initialised. This paper considers the techniques used to create a self-testing XForms test suite, some of the problems encountered, and gives examples of how some of them were solved...";
fil["236"]= "ar14s01.html@@@Introduction@@@...";
fil["237"]= "ar14s02.html@@@Introduction to XForms@@@...";
fil["238"]= "ar14s03.html@@@Test Suites@@@...";
fil["239"]= "ar14s04.html@@@The XForms 1.* test suite@@@...";
fil["240"]= "ar14s05.html@@@The XForms 2.0 test suite@@@...";
fil["241"]= "ar14s06.html@@@The Generic Structure of the Tests@@@...";
fil["242"]= "ar14s07.html@@@Datatypes@@@...";
fil["243"]= "ar14s08.html@@@Events@@@...";
fil["244"]= "ar14s09.html@@@Actions@@@...";
fil["245"]= "ar14s10.html@@@Initialisation@@@...";
fil["246"]= "ar14s11.html@@@Conclusion@@@...";
fil["247"]= "bi01.html@@@Bibliography@@@...";
fil["248"]= "bi02.html@@@References@@@...";
fil["249"]= "bi03.html@@@Bibliography@@@...";
fil["250"]= "bi04.html@@@Bibliography@@@...";
fil["251"]= "bi05.html@@@Bibliography@@@...";
fil["252"]= "bi06.html@@@Bibliography@@@...";
fil["253"]= "bi07.html@@@Bibliography@@@...";
fil["254"]= "bi08.html@@@Bibliography@@@...";
fil["255"]= "bi09.html@@@Bibliography@@@...";
fil["256"]= "bi10.html@@@Bibliography@@@...";
fil["257"]= "bi11.html@@@Bibliography@@@...";
fil["258"]= "bi12.html@@@References@@@...";
fil["259"]= "bi13.html@@@Bibliography@@@...";
fil["260"]= "build-file-example.html@@@Build file example@@@...";
fil["261"]= "code-generator-snat.html@@@Code generator SNAT@@@...";
fil["262"]= "conclusion.html@@@Conclusion@@@...";
fil["263"]= "crepdlDesignImpl.html@@@Design and Implementation of CREPDL@@@...";
fil["264"]= "development-policy.html@@@Development Policy@@@...";
fil["265"]= "documentation.html@@@Documentation@@@...";
fil["266"]= "example-of-use.html@@@Example of use@@@...";
fil["267"]= "introduction.html@@@Introduction@@@...";
fil["268"]= "machineReadableNotations.html@@@Existing Machine-readable Notations for Describing Subsets@@@...";
fil["269"]= "macro-construction.html@@@Macro construction@@@...";
fil["270"]= "oxygen-main.html@@@Markup UK 2018 Proceedings@@@...";
fil["271"]= "problem-1.html@@@Problem 1: Segment amendments in an amendments document@@@...";
fil["272"]= "problem-2.html@@@Problem 2: Recognize the location, action and operand information@@@...";
fil["273"]= "problem-3.html@@@Problem 3: Order the amendments according to the rule set@@@...";
fil["274"]= "problem-4.html@@@Problem 4: Generate the simulation@@@...";
fil["275"]= "section-metadata-model.html@@@Metadata model SNAT (Source Navigation Annotated Target tree)@@@...";
fil["276"]= "section-source-alignment-based-model.html@@@Source alignment based model@@@...";
fil["277"]= "solution-1.html@@@Segmenting amendments (Problem #1)@@@...";
fil["278"]= "solution-2.html@@@Recognizing location, action and operand information (Problem #2)@@@...";
fil["279"]= "solution-3.html@@@Ordering the amendments (Problem #3)@@@...";
fil["280"]= "solution-4.html@@@Simulating the effect (Problem #4)@@@...";
fil["281"]= "solution-validating-amendments.html@@@Validating amendments@@@...";
fil["282"]= "subsetsInUnicode.html@@@Subsets in Unicode@@@...";
fil["283"]= "subsetsinISOIEC10646.html@@@Subsets in ISO/IEC 10646@@@...";
fil["284"]= "the-ant-macro-library.html@@@The ANT macro library@@@...";
fil["285"]= "xpants-contents.html@@@XPantS contents@@@...";
fil["286"]= "xpants.html@@@XPantS@@@...";
var doStem = false;searchLoaded = true;