<!DOCTYPE html>
<html lang="en" xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no"/>

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="css/MUK.css" />
    
    <!-- Favicon -->
    <link rel="icon" type="image/png" href="img/MUK_Logo.png" />

    <title>Markup UK</title>
  </head>
  <body>
    
    <header>
      <nav>
        <a class="navbar-brand" href="index.xhtml"><span class="MUK-title"/></a>
        <ul>
          <li><a href="index.xhtml">Home</a></li>
          <li><a href="registration.xhtml">Registration</a></li>
          <li><a href="speakers.xhtml">Speakers</a></li>
          <li><a href="venue.xhtml">Venue</a></li>
          <li class="active"><a href="schedule.xhtml">Schedule</a><span class="sr-only"> (current)</span></li>
          <li><a href="webhelp/index_frames.html">Proceedings</a></li>
          <li><a href="Markup-UK-2018-proceedings.pdf">+PDF</a></li>
          <li><a href="committee.xhtml">Committee</a></li>
          <li><a href="2018/index.xhtml">2018</a></li>
        </ul>
      </nav>
    </header>
    
    <section class="content">
      <article>
        <h1>Conference Programme</h1>
        
        <p class="lead">Preconference Tutorials</p>
        <p>The preconference day, Friday 7 June, will comprise of three tutorial sessions by some of the world's foremost experts in their respective fields:</p>
        <ul>
          <li><strong>Achim Berndzen</strong> and <strong>Norman Walsh</strong> - XProc 3.0</li>
          <li><strong>Tony Graham</strong> - CSS Paged Media</li>
          <li><strong>Steven Pemberton</strong> - Declarative Applications with XForms</li>
        </ul>
        
        <p class="lead">Conference Preliminary Programme</p>
        
        <table style="text-align: left">
          <colgroup>
            <col/>
            <col/>
          </colgroup>
          <tbody>
            <tr>
              <td>
                <p><strong>Paper Title</strong></p>
              </td>
              <td>
                <p><strong>Author(s)</strong></p>
              </td>
            </tr>
            <tr>
              <td>
                <p>&lt;Angle-brackets/&gt; on the Branch Line - (model) railway engineering with XML technologies</p>
                <!-- Trigger the modal with a button -->
                <button type="button" data-toggle="modal" data-target="#lumley">Abstract</button>
                
                <!-- Modal -->
                <div class="modal fade" id="lumley" role="dialog">
                  <div class="modal-dialog">
                    
                    <!-- Modal content-->
                    <div class="modal-content" style="text-align: left;">
                      <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal"></button>
                        <h4 class="modal-title">&lt;Angle-brackets/&gt; on the Branch Line - (model) railway engineering with XML technologies</h4>
                      </div>
                      <div class="modal-body">
                        <p>As a retirement 'hobby', somewhat removed from the computing milieu, the author has started building a model railway in his garden. Surveying the extant tools for designing such layouts and finding them not quite right, he started building a design tool himself, using the familiar technologies of XSLT3 and SVG executing in a browser, employing Saxon-JS as the processing platform. The results of this were demonstrated, with some success, at Markup UK in 2018. This paper describes the design of this tool in some detail, as well as developments since that demonstration.
                        </p>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                      </div>
                    </div>
                    
                  </div>
                </div>
              </td>
              <td>
                <p><strong>John Lumley (jwLResearch)*</strong></p>
              </td>
            </tr>
            <tr>
              <td>
                <p>Documenting XML Structures</p>
                <!-- Trigger the modal with a button -->
                <button type="button" data-toggle="modal" data-target="#siegel">Abstract</button>
                
                <!-- Modal -->
                <div class="modal fade" id="siegel" role="dialog">
                  <div class="modal-dialog">
                    
                    <!-- Modal content-->
                    <div class="modal-content" style="text-align: left;">
                      <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal"></button>
                        <h4 class="modal-title">Documenting XML Structures</h4>
                      </div>
                      <div class="modal-body">
                        <p>There are lots of XML structures that need some kind of end-user documentation to be able to use them effectively. Its not easy to come up with a format that is both easy to understand and easy to create and maintain. Existing software for this is not always helpful. This talk will explore the this subject and look at from various angles.</p>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                      </div>
                    </div>
                    
                  </div>
                </div>
              </td>
              <td>
                <p><strong>Erik Siegel (Xatapult)*</strong></p>
              </td>
            </tr>
            <tr>
              <td>
                <p>An improved diff3 format for changes and conflicts in tree structures</p>
                <!-- Trigger the modal with a button -->
                <button type="button" data-toggle="modal" data-target="#lafontaine">Abstract</button>
                
                <!-- Modal -->
                <div class="modal fade" id="lafontaine" role="dialog">
                  <div class="modal-dialog">
                    
                    <!-- Modal content-->
                    <div class="modal-content" style="text-align: left;">
                      <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal"></button>
                        <h4 class="modal-title">An improved diff3 format for changes and conflicts in tree structures</h4>
                      </div>
                      <div class="modal-body">
                        <p>There are some pieces of software, and some formats, that are de-facto standards and have been around for decades. One of these is the diff3 format for representing changes and conflicts in text documents. Diff3 works well for unstructured text documents that are divided into lines. It works surprisingly well for pretty-printed source code and similar documents. But it has frustrating limitations when used for XML or JSON or similar tree-based data formats.</p>
                        <p>Can we improve on diff3 without making it too complicated? Can the existing representation of changes and conflicts be extended to handle tree-based data? This paper seeks to answer these questions and to describe how further benefits can be enjoyed by using XML or JSON as the basis for showing conflicts and changes.</p>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                      </div>
                    </div>
                    
                  </div>
                </div>
              </td>
              <td>
                <p><strong>Robin La Fontaine (DeltaXML Ltd)*; Nigel A Whitaker (DeltaXML Ltd)</strong></p>
              </td>
            </tr>
            <tr>
              <td>
                <p>Scrap the App, Keep the Data</p>
                <!-- Trigger the modal with a button -->
                <button type="button" data-toggle="modal" data-target="#davoti">Abstract</button>
                
                <!-- Modal -->
                <div class="modal fade" id="davoti" role="dialog">
                  <div class="modal-dialog">
                    
                    <!-- Modal content-->
                    <div class="modal-content" style="text-align: left;">
                      <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal"></button>
                        <h4 class="modal-title">Scrap the App, Keep the Data</h4>
                      </div>
                      <div class="modal-body">
                        <p>Whether by reacting swiftly to shifting market conditions and disruptive technologies or by growing through mergers and acquisitions, the ability to adapt is critical to success in the digital age.</p>
                        <p>As business processes and workflows evolve, new technologies and systems are constantly introduced to support them. Over time, IT estates become fragmented, and the number of legacy systems increases year by year. Valuable data ends up in isolated silos, only accessible via unnecessary applications that are expensive to maintain and license or are approaching the end of life.</p>
                        <p>This paper suggests a generic approach to transform arbitrary relational data into aggregated, hierarchical form and build a thin application to provide read access to end users.</p>
                        <p>In my presentation, I would like to point out why the relational model falls short when it comes to data aggregation.</p>
                        <p>XML can easily model both relational and hierarchical data. It's an excellent choice for data re-modeling and also for building a thin, data access application.</p>
                        <p>The approach I want to share with the audience is based on experience from multiple projects. </p>
                        <p>XML "bricks" used in the solution:</p>
                        <ul>
                          <li>processing pipeline configuration as XML (Apache Ant)</li>
                          <li>XSLT</li>
                          <li>XQuery</li>
                          <li>XML Database</li>
                        </ul>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                      </div>
                    </div>
                    
                  </div>
                </div>
              </td>
              <td>
                <p><strong>Barnabas Davoti (Ovitas AS)*</strong></p>
              </td>
            </tr>
            <tr>
              <td>
                <p>Software we have lost — the mortar that held the bricks together</p>
                <!-- Trigger the modal with a button -->
                <button type="button" data-toggle="modal" data-target="#flynn">Abstract</button>
                
                <!-- Modal -->
                <div class="modal fade" id="flynn" role="dialog">
                  <div class="modal-dialog">
                    
                    <!-- Modal content-->
                    <div class="modal-content" style="text-align: left;">
                      <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal"></button>
                        <h4 class="modal-title">Software we have lost — the mortar that held the bricks together</h4>
                      </div>
                      <div class="modal-body">
                        <p>Since the first days of SGML, there has been a variety of software to parse, validate, analyse, format, store, search, and extract the information.  Some of this was what we now call Open Source, particularly the utilities, but the majority of applications were normal commercial offerings.</p>
                        <p>In the course of time, many of these have become unavailable, for assorted reasons, with the result is that some very useful systems have been lost, and replacements are not as effective.</p>
                        <p>This research attempts to catalogue and analyse a collection of XML and SGML software that is either off the market, or only available within a different product, and thus not accessible to users.  The objective is to see if there are still ways to “shorten the distance between the bricks” that are not otherwise provided for.</p>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                      </div>
                    </div>
                    
                  </div>
                </div>
              </td>
              <td>
                <p><strong>Peter Flynn (Silmaril Consultants)*</strong></p>
              </td>
            </tr>
            <tr>
              <td>
                <p>Beyond the brick, for the past in the future, you find the archive!</p>
                <!-- Trigger the modal with a button -->
                <button type="button" data-toggle="modal" data-target="#bredenberg">Abstract</button>
                
                <!-- Modal -->
                <div class="modal fade" id="bredenberg" role="dialog">
                  <div class="modal-dialog">
                    
                    <!-- Modal content-->
                    <div class="modal-content" style="text-align: left;">
                      <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal"></button>
                        <h4 class="modal-title">Beyond the brick, for the past in the future, you find the archive!</h4>
                      </div>
                      <div class="modal-body">
                        <p>The statement that XML is dead is as wrong as celebrating Christmas on midsummer night’s eve! Imagine making an archival soup based on international standards using XML, with one municipal archive, two regional archives, five national archives and the European Commission’s eArchiving Building block thrown into the mix. This is what we are going to attempt.</p>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                      </div>
                    </div>
                    
                  </div>
                </div>
              </td>
              <td>
                <p><strong>Karin Bredenberg (The Swedish National Archives)*; Jaime Kaminski (University of
                  Brighton)</strong></p>
              </td>
            </tr>
            <tr>
              <td>
                <p>Everyone Knows What a Dragon Looks Like</p>
                <!-- Trigger the modal with a button -->
                <button type="button" data-toggle="modal" data-target="#usdin">Abstract</button>
                
                <!-- Modal -->
                <div class="modal fade" id="usdin" role="dialog">
                  <div class="modal-dialog">
                    
                    <!-- Modal content-->
                    <div class="modal-content" style="text-align: left;">
                      <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal"></button>
                        <h4 class="modal-title">Everyone Knows What a Dragon Looks Like</h4>
                      </div>
                      <div class="modal-body">
                        <p>We are overwhelmed by competing standards, technologies, and approaches to solving problems we may or may not understand and may or may not have anticipated. Each of us individually, and we as a community, have limited resources and want to concentrate our energies where they are most likely to be successful. Selection from among the cornucopia of options is often made more difficult by our preconceived notions of the shape, source, and promulgator of appropriate technologies. In many cases we seek, and occasionally we find, a powerful tool that seems to address all of our problems. The quest for such tools has led many of us to become standards junkies or technology evangelists. The belief that we have created or identified such a tool leads some of us to become missionaries promoting the use of a standard, a paradigm, or even a tool. In the children's book "Everyone Knows what a Dragon Looks Like", illustrated by Mercer Mayer, Jay Williams raises questions about the recognition and appropriate use of powerful tools. From it, we can learn to be little more skeptical of our ability to know the tools we need when we see them.</p>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                      </div>
                    </div>
                    
                  </div>
                </div>
              </td>
              <td>
                <p><strong>Tommie Usdin (Mulberry Technologies, Inc.)*</strong></p>
              </td>
            </tr>
            <tr>
              <td>
                <p>Taking Schematron QuickFix to the Next Level</p>
                <!-- Trigger the modal with a button -->
                <button type="button" data-toggle="modal" data-target="#nadolu">Abstract</button>
                
                <!-- Modal -->
                <div class="modal fade" id="nadolu" role="dialog">
                  <div class="modal-dialog">
                    
                    <!-- Modal content-->
                    <div class="modal-content" style="text-align: left;">
                      <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal"></button>
                        <h4 class="modal-title">Taking Schematron QuickFix to the Next Level</h4>
                      </div>
                      <div class="modal-body">
                        <p>The Schematron QuickFix (SQF) language can be used to improve efficiency and quality when editing XML documents. You can define actions that will add complex XML structure in your documents, or make modifications in multiple places, or actions that will convert an XML structure into another. These changes are made by keeping the document structure valid and conform to your project specification and will help the content writer add content more easily and without making mistakes.</p>
                        <p>To build complex actions you can to mix Schematron QuickFix language with ISO Schematron, or with different versions of XSLT and XPath, or you can define your own extensions using programming languages such as Java. This way, you can perform modifications in multiple external documents, or display dialog boxes to get input from your users, or use complex algorithms for processing the content of the documents.</p>
                        <p>The Schematron QuickFix is a modular language. Even though it is simple (having only four types of operations that can be performed: add, delete, replace, and string replace), new types of operations can be created (such as wrap, unwrap, rename, or join). This can be implemented by using abstract quick fixes and by creating libraries of quick fixes that can be reused for various different XML vocabularies (such as DITA, DocBook. TEI). By using a library of quick fixes will help the Schematron Quick Fixes developers to create the actions more easily and reuse the quick fixes created by others.</p>
                        <p>This presentation will focus on some interesting use-cases and examples of Schematron Quick Fixes that can be easily adapted to your projects. The examples will include both abstract quick fixes and complex quick fixes that use XSLT and Java.</p>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                      </div>
                    </div>
                    
                  </div>
                </div>
              </td>
              <td>
                <p><strong>Octavian Nadolu (Syncro Soft)*</strong></p>
              </td>
            </tr>
            <tr>
              <td>
                <p>Validating @selector: a regular expression adventure</p>
                <!-- Trigger the modal with a button -->
                <button type="button" data-toggle="modal" data-target="#bauman">Abstract</button>
                
                <!-- Modal -->
                <div class="modal fade" id="bauman" role="dialog">
                  <div class="modal-dialog">
                    
                    <!-- Modal content-->
                    <div class="modal-content" style="text-align: left;">
                      <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal"></button>
                        <h4 class="modal-title">Validating @selector: a regular expression adventure</h4>
                      </div>
                      <div class="modal-body">
                        <p>The TEI recently introduced a new attribute, @selector, whose value (by
                          default) is “a selector … CSS selector syntax will be used.” The TEI does not
                          provide any validation constraints on @selector, defining it as teidata.text (which
                          boils down to the RelaxNG string datatype).</p>
                        <p>This strikes me as insufficient; formal syntactic validation of @selector is in order.
                          The TEI does not say which version of CSS to use; I chose CSS3. The only
                          formal constraint system available in the TEI schema language (other than
                          enumerated lists of values and XSD datatypes) is the W3C regular expression
                          language. Thus I set about writing a regular expression to validate CSS3
                          selectors.</p>
                        <p>This presentation will be both about the process of creating said regular
                          expression, and the result. The result is a regular expression that is somewhat
                          long—just over 18,300 characters—that I believe correctly matches valid CSS3
                          selectors and correctly fails to match strings that are not valid CSS3 selectors.
                          If it turns out I am mistaken, I would like to learn that.</p>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                      </div>
                    </div>
                    
                  </div>
                </div>
              </td>
              <td>
                <p><strong>Syd Bauman (Northeastern University Digital Scholarship Group)*</strong></p>
              </td>
            </tr>
            <tr>
              <td>
                <p>Generating documents from XQuery annotations</p>
                <!-- Trigger the modal with a button -->
                <button type="button" data-toggle="modal" data-target="#bunce">Abstract</button>
                
                <!-- Modal -->
                <div class="modal fade" id="bunce" role="dialog">
                  <div class="modal-dialog">
                    
                    <!-- Modal content-->
                    <div class="modal-content" style="text-align: left;">
                      <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal"></button>
                        <h4 class="modal-title">Generating documents from XQuery annotations</h4>
                      </div>
                      <div class="modal-body">
                        <p>The paper describes an implementation of an xqDoc.org  documentation generator. A focus of this implementation is XQuery annotation support. In 2014 the xqDoc schema was updated to include markup to capture XQuery annotations, however existing renderers have often not been updated to make use of this.</p>
                        <p>A major driver for annotation support is documenting XQuery web applications built using the RESTXQ standard. RESTXQ defines a standard set of XQuery annotations that can be used to define RESTful Web Services from XQuery. Annotations are also being used to define frameworks for unit testing, user permissioning and web socket interfaces. Annotations are code markup that the runtime environment may choose to use to wire-in additional external functionality to XQuery applications.</p>
                        <p>The xqdoc implementation is open source. It is largely written in XQuery and runs with recent versions of BaseX. It generates static, stand alone HTML5 and XML output. The included XQuery library modules can also be used to assist in the generation other related documentation artefacts. In the case of RESTXQ these could be the generation of openAPI(swagger) and WADL documents.</p>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                      </div>
                    </div>
                    
                  </div>
                </div>
              </td>
              <td>
                <p><strong>Andrew p Bunce (Quodatum Ltd)*</strong></p>
              </td>
            </tr>
            <tr>
              <td>
                <p>XMLPaper: XML-based Conference Paper Workflow</p>
                <!-- Trigger the modal with a button -->
                <button type="button" data-toggle="modal" data-target="#talau">Abstract</button>
                
                <!-- Modal -->
                <div class="modal fade" id="talau" role="dialog">
                  <div class="modal-dialog">
                    
                    <!-- Modal content-->
                    <div class="modal-content" style="text-align: left;">
                      <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal"></button>
                        <h4 class="modal-title">XMLPaper: XML-based Conference Paper Workflow</h4>
                      </div>
                      <div class="modal-body">
                        <p>Popular conference management systems are monolithic solutions that are used across many fields and by very diverse audiences. As a result, these systems have rigid technology choices for paper format: PDF, TeX or Word which have limitations compared to a structured format such as XML. In addition, they do not cover all the steps in the paper submission lifecycle such as: collaboration between authors.</p>
                        <p>We propose a new solution for conference paper submission management that tries to improve the user experience in several areas: authors tooling setup, collaboration between authors, multi-step review processes, multi-format proceedings publishing.This paper will present a typical conference paper submission workflow and identify its steps, the stakeholders and the tools and technologies used. We will then present how our solution improves user experience of each of the stakeholders.</p>
                        <p>In this solution, the documents are authored in the an XML format, that supports publishing both as PDF and web portal. The output format is customizable and clearly communicated to authors so that they can preview how the paper will be published. Authors have a very intuitive user interface to draft the paper and to collaborate in cases where a paper has multiple authors. Reviewers can choose to review either the published PDF or directly on the source. In case of multi-round reviews, they can see the changes made between different revisions, thus being able to focus on the last updates.</p>
                        <p>From a technical point of view, the solution is composed from off-the-shelf Web services with a thin layer of orchestration. It may to be used together with a regular Conference Management System, replacing parts of its functionality.</p>
                        <p>To conclude the paper, we analyze how this solution is similar with other workflows related to content creation in a company, such as creating release notes or datasheets for a product.</p>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                      </div>
                    </div>
                    
                  </div>
                </div>
              </td>
              <td>
                <p><strong>Cristian Talau (Syncro Soft)*</strong></p>
              </td>
            </tr>
            <tr>
              <td>
                <p>XQuery for Data Workers</p>
                <!-- Trigger the modal with a button -->
                <button type="button" data-toggle="modal" data-target="#couthures">Abstract</button>
                
                <!-- Modal -->
                <div class="modal fade" id="couthures" role="dialog">
                  <div class="modal-dialog">
                    
                    <!-- Modal content-->
                    <div class="modal-content" style="text-align: left;">
                      <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal"></button>
                        <h4 class="modal-title">XQuery for Data Workers</h4>
                      </div>
                      <div class="modal-body">
                        <p>A data worker is a running program which manipulates data. It can get data from various sources then transform it and save, or send, the resulting data. A common usage for data workers is interfaces between applications.</p>
                        <p>XQuery is a data-oriented language which is not bound to databases and which is able to format data conveniently as text or XML. Many implementations have added function libraries to access file system, send HTTP requests, and so on... XQuery is a high-level programming language because repetitive operations such as loading a document from anywhere just requires the minimal information to be provided.</p>
                        <p>Considered requirements for a new open source XQuery implementation have been no platform limitation, light deployment, extensibility, asynchronous processing, no big pressure on performance: Javascript+NodeJS has been chosen (with possible, but limited, run within browsers).</p>
                        <p>This implementation is named “Fleur”. It supports XQuery/XQuery Update Facility 3.1 (not full conformance yet) upon its own DOM Level 3 (and browsers DOM). XQuery source is compiled into XQueryX structure which is stored in a Javascript array of arrays.</p>
                        <p>Fleur can process non-XML documents as XML documents with extensions at DOM level. Internally, Fleur manipulates everything as nodes, computed values been always stored into orphan atomic nodes.</p>
                        <p>Parsing/serializing non-XML sources is then implemented just at DOM level according to media-type. Experimentally, CSV files and Excel files are directly loaded into 2-dimension sequences.</p>
                        <p>Fleur CLI includes the possibility of launching an HTTP server. This server executes .xqy pages. XForms, with XSLTForms, can be used to both submit parameters as data to the Worker and render data returned by the Worker.</p>
                        <p>Fleur has already been used in various situations (XLSForm to XForms, dashboards, OFX conversion). Fleur will be integrated in XSLTForms for XForms 2.0 compliance. XForms actions could then be developed with XQuery Update Facility syntax.</p>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                      </div>
                    </div>
                    
                  </div>
                </div>
              </td>
              <td>
                <p><strong>Alain Couthures (agenceXML)*</strong></p>
              </td>
            </tr>
            <tr>
              <td>
                <p>Dispelling Myths About Markup Formats</p>
                <!-- Trigger the modal with a button -->
                <button type="button" data-toggle="modal" data-target="#quin">Abstract</button>
                
                <!-- Modal -->
                <div class="modal fade" id="quin" role="dialog">
                  <div class="modal-dialog">
                    
                    <!-- Modal content-->
                    <div class="modal-content" style="text-align: left;">
                      <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal"></button>
                        <h4 class="modal-title">Dispelling Myths About Markup Formats</h4>
                      </div>
                      <div class="modal-body">
                        <p>Misunderstandings about the goals and strengths of different document and data interchange formats can lead to suboptimal decisions. Such misunderstandings appear widespread. The purpose of this paper is to suggest areas in which each format has strengths, and to provide clear explanations that people can use to place XML in the context of other current markup systems.</p>
                        <p>Misconceptions about XML include statements such as “XML was designed for Web services and therefore unsuitable for documents;” “XML was designed to replace HTML and has failed;” “XML cannot transmit semantics of any kind;” “XML is dead.”  In fact, XML is alive and well.</p>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                      </div>
                    </div>
                    
                  </div>
                </div>
              </td>
              <td>
                <p><strong>Liam R E Quin (Delightful Computing)*</strong></p>
              </td>
            </tr>
            <tr>
              <td>
                <p>Subcheck — a validation framework</p>
                <!-- Trigger the modal with a button -->
                <button type="button" data-toggle="modal" data-target="#tai">Abstract</button>
                
                <!-- Modal -->
                <div class="modal fade" id="tai" role="dialog">
                  <div class="modal-dialog">
                    
                    <!-- Modal content-->
                    <div class="modal-content" style="text-align: left;">
                      <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal"></button>
                        <h4 class="modal-title">Subcheck — a validation framework</h4>
                      </div>
                      <div class="modal-body">
                        <p>This paper will introduce an operational perspective: how a research question and master thesis ended up in practice and turned into a product. We want to show which requirements led to the solutions, how they were implemented, and which problems still remain to be solved.</p>
                        <p>One of the main application areas of XML is the exchange of data between business partners. The data is in an agreed structured form that will usually be checked at the receiver’s end. It needs to be “validated” such that syntax and values of the data respects rules made in the agreement. But not only the receiver needs to check the data. To avoid rejection by the receiving business partner, the sender might want to verify that the data does not break any of these rules. Often such document data is made not only for one purpose and receiver, different business partners may have overlapping but slightly different rule sets and use-cases.</p>
                        <p>This is especially true with publishing-houses or media companies, where players share lot of the same grammar and constraints on data, yet each format has been enriched with some “house- rules” and recommendations that vary slightly. For instance media subtitles encoded in TTML might be perfectly valid according to a given schema, but still in violation of guidelines, business rules and recommendations.</p>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                      </div>
                    </div>
                    
                  </div>
                </div>
              </td>
              <td>
                <p><strong>Andreas Tai (IRT - Institut fuer Rundfunktechnik GmbH)*; Michael Seiferle (BaseX
                  GmbH)</strong></p>
              </td>
            </tr>
            <tr>
              <td>
                <p>xprocedit, A Browser-Based Open-Source XProc Editor</p>
                <!-- Trigger the modal with a button -->
                <button type="button" data-toggle="modal" data-target="#imsieke">Abstract</button>
                
                <!-- Modal -->
                <div class="modal fade" id="imsieke" role="dialog">
                  <div class="modal-dialog">
                    
                    <!-- Modal content-->
                    <div class="modal-content" style="text-align: left;">
                      <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal"></button>
                        <h4 class="modal-title">xprocedit, A Browser-Based Open-Source XProc Editor</h4>
                      </div>
                      <div class="modal-body">
                        <p>A visual XProc editor can serve at least two purposes: Communicating the process flow to non-programmers and easing the notoriously steep learning curve for programmers.</p>
                        <p>An implementation using the Javascript framework joint.js and the in-browser XSLT 3 processor Saxon-JS is demonstrated, along with the challenges of supporting XProc’s peculiarities in a generic graph editing framework.</p>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                      </div>
                    </div>
                    
                  </div>
                </div>
              </td>
              <td>
                <p><strong>Marco Geue (Hochschule Merseburg); Gerrit Imsieke (le-tex publishing services
                  GmbH)*</strong></p>
              </td>
            </tr>
            <tr>
              <td>
                <p>Accessibility matters</p>
                <!-- Trigger the modal with a button -->
                <button type="button" data-toggle="modal" data-target="#graham">Abstract</button>
                
                <!-- Modal -->
                <div class="modal fade" id="graham" role="dialog">
                  <div class="modal-dialog">
                    
                    <!-- Modal content-->
                    <div class="modal-content" style="text-align: left;">
                      <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal"></button>
                        <h4 class="modal-title">Accessibility matters</h4>
                      </div>
                      <div class="modal-body">
                        <p>XML, by itself, does not have any support for accessibility. XML is extremely flexible, but it needs to flex in the right directions if it is going to support the information necessary to make a document accessible. This session is a guided tour of some of the features of the HTML, Web Content Accessibility Guidelines (WCAG), and PDF/UA (Universal Accessibility) standards. It concentrates on file formats rather than User Agent behaviour, since the information needed to make accessible HTML or PDF needs to be included in, or able to be inferred from, the source XML.</p>
                        <p>However, it’s rarely the raw XML that is presented to users. The session will also stray into some aspects of styling the content to make it more accessible.</p>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                      </div>
                    </div>
                    
                  </div>
                </div>
              </td>
              <td>
                <p><strong>Tony Graham (Antenna House)*</strong></p>
              </td>
            </tr>
            <tr>
              <td>
                <p>XSpec in the Cloud with Diamonds</p>
                <!-- Trigger the modal with a button -->
                <button type="button" data-toggle="modal" data-target="#cirulli">Abstract</button>
                
                <!-- Modal -->
                <div class="modal fade" id="cirulli" role="dialog">
                  <div class="modal-dialog">
                    
                    <!-- Modal content-->
                    <div class="modal-content" style="text-align: left;">
                      <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal"></button>
                        <h4 class="modal-title">XSpec in the Cloud with Diamonds</h4>
                      </div>
                      <div class="modal-body">
                        <p>Running XSpec tests in a development team is usually performed via a CI server/service. However, this comes with limitations related to the use of private repositories and to the cost and burden of administering CI servers.</p>
                        <p>This paper describes an alternative approach for running XSpec tests from private repositories using a serverless architecture built on AWS Lambda. It describes the technical configuration and discusses the benefits, cost optimization, and constraints of a serverless architecture for running XSpec tests.</p>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                      </div>
                    </div>
                    
                  </div>
                </div>
              </td>
              <td>
                <p><strong>Sandro Cirulli (XSpec)*</strong></p>
              </td>
            </tr>
          </tbody>
          
        </table>
        
        
        
        <!--<p>We'll be announcing both the preconference day tutorials and the main conference programme within the next few days. Please check back often!</p>-->
        
        
        <div>
          
          <!--<p><a href="#saturday"><strong>Saturday</strong></a> - <a href="#sunday"><strong>Sunday</strong></a></p>-->
          
          <!--<table id="saturday">
            <thead>
              <tr>
                <td>Saturday</td>
                <td/>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>0845-0930</td>
                <td> Registration </td>
              </tr>
              <tr>
                <td>0930-1015</td>
                <td>
                  <p><strong>Shared Tag Sets as Social Constructs</strong><br/>B. Tommie Usdin (Mulberry Technologies)</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#tommie">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="tommie" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">Shared Tag Sets as Social Constructs</h4>
                        </div>
                        <div class="modal-body">
                          <p>At Markup UK we are likely to hear presentations about creation, maintenance, and use of specific tag sets. We are likely to hear more presentations that focus on some aspect of creation, interchange, manipulation, use, or archiving of document content encoded in one or another shared tag sets. In both cases, we will focus on the tag set or the documents, but not on the social forces that shape the tag set and that are shaped by the tag set.</p>
                          <p>The public tag sets: TEI, DITA, UBL, JATS, HL7, BITS, STS, DocBook, HTML and hundreds (perhaps thousands) of others were created by groups of people to meet specific needs. The needs of those groups, and the changing needs of the various members who have joined or left these activities, have shaped the tag sets. Things the membership, or the sponsors, or the most vocal/powerful members, think are important are enabled and/or emphasized. We are seeing more and more tag sets providing the ability to enhance documents with accessability information as access becomes more important in the world in general.</p>
                          <p>Conversely, shared tag sets, and the assumptions that underlie them, shape the world view of their users. Before HTML it was common to build tagging structures that allowed paragraphs to contain lists; these days that is considered surprising. Before SGML and XML it was not unusual to discuss how to capture the overlapping structures in texts; now it may be considered a “corner case”, and to many it is simply unthinkable. The communities around various tag sets may pressure users to encode information they do not need in documents because the community expects it: TEI users may feel pressure to provide metadata, JATS users to provide richly encoded citations, HTML users to use more generic tags in place of visually descriptive tags.</p>
                          <p>Shared tag sets are much more than lists of codes, they are powerful and dynamic social constructs that influence and are influenced by the world. </p>
                          
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <td>1015-1100</td>
                <td>
                  <p><strong>How to Make a Flying Start with S1000D – Lessons Learned at the Airport</strong>
                    <br/>Rob Walpole (Devexe Limited)</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#rob">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="rob" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">How to Make a Flying Start with S1000D – Lessons Learned at the Airport</h4>
                        </div>
                        <div class="modal-body">
                          <p>S1000D is a specification for tech pubs which has been broadly adopted in the aerospace industry. It provides XML schemas for common doc types and defines how these documents should be structured in a common source database. S1000D is replacing the ATA SGML format as the primary spec for OEM aircraft manuals and is used for new aircraft such as the Boeing 787 and Airbus A350. At the same time, mobile devices are playing an increasing role in aircraft maintenance, allowing engineers to access technical information at the point of need.</p>
                          <p>Airlines are pressured to keep fares low but still maintain the highest safety standards. A single source for engineering content is one way to reduce overheads. It follows that other documents for engineers should also be S1000D to allow common tools for managing and rendering content.</p>
                          <p>This paper discusses implementing S1000D for a major UK airline’s engineering procedures. While OEM manuals cover much information needed by engineers, airlines still need their own procedures for topics like health and safety, planning and quality control. In fact, to cover all aspects of keeping aircraft functioning safely and comfortably for passengers.</p>
                          <p>S1000D can be daunting for the inexperienced though. The version 4.1 spec is over 3500 pages long and not an easy read. There is a shortage of S1000D information in the public domain, perhaps because it is still quite new, the majority of aircraft manuals are still in SGML and the industry is understandably cautious about change.</p>
                          <p>Of course, you could skip the spec and just start creating some S1000D schema compliant XML, only referring to it when you hit a snag. This is a very bad idea. By this time, you will likely have created a number of problems for yourself which will be hard to unwind. This paper will explain some of the design decisions you need to make before going anywhere near a keyboard and hopefully save you from some of the pain that you will inevitably experience.</p>
                          
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <td>1100-1130</td>
                <td>Break</td>
              </tr>
              <tr>
                <td>1130-1215</td>
                <td>
                  <p><strong>Two (and a half) models for markup of bibliographic references</strong><br/>Mark Dunn (Oxford University Press)</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#dunn">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="dunn" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">Two (and a half) models for markup of bibliographic references</h4>
                        </div>
                        <div class="modal-body">
                          <p>This paper describes two models for semantic markup of bibliographic references, their advantages and disadvantages, and the challenges of automating a conversion from one format to the other. </p>
                          <p>In one format a reference is captured as plain text. The semantic markup (author name, title, publication date, etc) is captured in attributes on the element containing the reference text.</p>
                          <p>The other format is BITS, where each component of a reference is captured in its own element. The BITS model comes in two flavours, &lt;element-citation&gt; and &lt;mixed-citation&gt;, hence the extra half a model in the title.</p>
                          <p>The conversion to BITS needs to support OpenURL linking and the Initiative for Open Citations (I4OC).</p>
                          
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <td>1215-1300</td>
                <td>
                  <p><strong>First Steps in Marking Up a Corpus of Cryptic Crosswords</strong><br/>Bethan Tovey (Markup UK)</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#bethan">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="bethan" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">First Steps in Marking Up a Corpus of Cryptic Crosswords</h4>
                        </div>
                        <div class="modal-body">
                          <p>In a quick crossword, the relationship between clue and answer is usually simply definitional: the clue offers a definition or description of, or a synonym for, the answer. In a cryptic crossword, the relationship between clue and answer is significantly more complex, and may be one of many types. Anagrams, puns, hidden words, deletions, reversals, and other techniques are used, often in combination. Every word in a clue does one of three jobs: a) defining the answer (a synonym or definition of the answer word(s)); b) producing part or all of the answer word; or c) indicating how the words in b) are to be manipulated. It follows that each part of an answer will relate back to one or more words in the clue from category b), while the whole answer will relate to the word(s) in category a).</p>
                          <p>This paper will describe the early work of creating a markup scheme which relates each part of a cryptic crossword clue to the relevant part of its answer, as well as giving full linguistic detail for each word. The aim of this project is to create a corpus of cryptic clues and answers which can be explored to answer linguistic questions. Examples of questions that might be asked of the data include:</p>
                          <p>Do crosswords in different newspapers use the same or different category c) words to indicate letter reversals?</p>
                          <p>Do anagrams tend to require the use of less-common vocabulary than other clue types?</p>
                          <p>Are category c) words always verbs? If not, do different techniques have different ratios of parts-of-speech from each other?</p>
                          <p>The paper will consist of four parts:</p>
                          <p>1) A brief introduction to cryptic crossword clues;</p>
                          <p>2) The project aims;</p>
                          <p>3) Description of problems encountered in the early stages of the project and the steps taken to solve them;</p>
                          <p>4) Examples of progress so far, and description of next steps.</p>
                          
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <td>1300-1400</td>
                <td>Lunch</td>
              </tr>
              <tr>
                <td>1400-1445</td>
                <td>
                  <p><strong>Modern amendment drafting - The road to XML</strong><br/>Bert Willems (FontoXML)</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#bert">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="bert" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">Modern amendment drafting - The road to XML</h4>
                        </div>
                        <div class="modal-body">
                          <p>This paper proposes a system to aid in the drafting of amendment documents. The system provides a mechanism to help validate the correctness of amendments. Furthermore the system is able to semi-automatically sort the amendments in voting order and simulate the effects of amendments on the law. The proposed implementation is based on XML technology, an XML editor and machine learning.</p>
                          
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <td>1445-1530</td>
                <td>
                  <p><strong>Introduction to CSS for Paged Media</strong><br/>Tony Graham (Antenna House)</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#tony">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="tony" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">Introduction to CSS for Paged Media</h4>
                        </div>
                        <div class="modal-body">
                          <p>CSS can be used for making pages as well as for styling websites. Many people are familiar with CSS in the browser: some are very familiar, but others, not so much. Fewer people, however, are as familiar with using CSS for paged media.</p>
                          <p>This tutorial takes an eat-your-own-dog-food approach to showing how to use CSS for paged media. Starting with the HTML text of a comprehensive, new 140-page (when formatted) tutorial on using CSS with paged media, the session will progressively add and explain the CSS styles that are used to format the finished text. By the end of the session, the fairly undifferentiated mass of text will be formatted with running headers and footers, page numbers and page number cross-references, bleeds, CMYK colours, footnotes, top- and bottom-floats, and other features that appear in paged media but not in a browser. The session will also describe accessibility features of PDF.</p>
                          <p>Because of the comparatively short duration of the session, there is only time to cover the CSS features specific to paged media.</p>
                          
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <td>1530-1600</td>
                <td>Break</td>
              </tr>
              <tr>
                <td>1600-1645</td>
                <td>
                  <p><strong>The Wolfenbüttel emblem2rdf pipeline</strong><br/>David Maus (Herzog August Bibliothek Wolfenbüttel)</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#maus">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="maus" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">The Wolfenbüttel emblem2rdf pipeline</h4>
                        </div>
                        <div class="modal-body">
                          <p>The project "Emblematica Online - Linked Open Emblem Data" set out to publish the Wolfenbüttel collection of emblem books as a resource for digital emblem studies. At the end we managed to publish information about approximately 12300 emblems and 220 emblem books.</p>
                          <p>After a short introduction into the field of digital emblem studies at the Herzog August Bibliothek Wolfenbüttel the article presents the challenges we faced when working with XML encoded information that dates back to the beginnings of web and the infancy of today's Digital Humanities, the solutions we employed to tackle these problems and how we ended up implementing a publication pipeline implemented in XProc.</p>
                          <p>Some of the topics I like to discuss are missing documentation and schema validation, legacy technology (i.e. DTD), the creative use of XML specifications, and an unexpected kind of vendor lock-in, i.e. being dependent the parsing quirks of the open source XML processing environment PHP + libxml, and the benefits of XProc as a declarative language for XML processing pipelines that allowed us to quickly iterate possible solutions.</p>
                          
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <td>1645-1730</td>
                <td>
                  <p><strong>CREPDL: Protect yourself from the proliferation of Unicode characters</strong><br/>Makoto Murata (Keio University)</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#murata-san">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="murata-san" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">CREPDL: Protect yourself from the proliferation of Unicode characters</h4>
                        </div>
                        <div class="modal-body">
                          <p>Which character in Unicode are you willing to accept? If you 
                            receive UTF-8 text from somebody, it might contain any of 
                            the 136,690 code points of Unicode 10.</p>
                          <p>Accepting any Unicode character may lead to problems in the future.
                            First, nobody can read all characters. Second, few fonts cover all
                            characters. Third, some software such as document editors support
                            only a subset of Unicode.</p>
                          <p>Historically, legacy encodings have protected users from the
                            proliferation of characters. For example, as long as you use
                            Shift-JIS, you only have to worry about 7,000 characters. But UTF-8
                            now exposes almost 88,000 CJK ideographic characters.</p>
                          <p>In the Unicode era, we need a language for describing which character
                            is to be allowed and then examining text aganist descriptions in this
                            language. ISO/IEC 19757-7 Character REPertoire Description Language
                            (CREPDL) is an attempt of ISO/IEC JTC1/SC34 for such a language.
                            CREPDL can also be used for desribing the character repertoire of a
                            font.</p>
                          
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <td>1800-2100</td>
                <td><strong>Drinks, Dinner, and DemoJam!</strong><br/></td>
              </tr>
            </tbody>
          </table>-->
          
          
          <!--<table id="sunday">
            <thead>
              <tr>
                <td>Sunday</td>
                <td/>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>0845-0930</td>
                <td>Registration</td>
              </tr>
              <tr>
                <td>0930-1015</td>
                <td>
                  <p><strong>Rethinking transformation - the potential of code generation</strong><br/>Hans-Juergen Rennau and Hauke Brandes (parsQube GmbH)</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#hans">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="hans" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">Rethinking transformation - the potential of code generation</h4>
                        </div>
                        <div class="modal-body">
                          <p>A code generator for document to document transformation is introduced. It reduces the development effort to editing a set of metadata items attached to a tree model of the target documents. Metadata values are XQuery expressions which are typically so simple that they do not require genuine programming skills. Nevertheless, expressions are more difficult to provide than static values, and therefore possibilities of further simplifying the development task are explored, striving to enable subject matter experts to define the transformation without writing XQuery expressions. This can be achieved by generating the expressions from assertions about alignments between source and target nodes, although specific requirements will often necessitate additional information. As alignments can be represented graphically by connecting lines, the approach amounts to a solid conceptual foundation for graphical mapping tools. Finally, the underlying model of code generation driven by target document structure is generalized into a conceptual framework which is not restricted to XML data sources. Its usefulness is demonstrated by a simple code generator for transforming RDF data into XML documents.</p>
                          
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <td>1015-1100</td>
                <td>
                  <p><strong>Non-XML workflows with XProc 3.0</strong><br/>Achim Berndzen (&lt;xml-project /&gt;)</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#achim">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="achim" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">Non-XML workflows with XProc 3.0</h4>
                        </div>
                        <div class="modal-body">
                          <p>XProc 1.0 is clearly an XML-centric language to design workflows, actually it is mostly an XML-only workflow language. This is fine for a lot of tasks, but it turns out, that even workflows dealing mostly with XML documents have also the need to deal with non-XML data. Just think of an ePUB mostly containing XHTML documents, but also having some JPEGs with illustrations, a manifest file which is pure text and finally been essentially a special kind of ZIP-document.</p>
                          <p>As such workflows shows up quite often in real day life, the ability to deal with non-XML documents was a high priority requirement when developing the next version of XProc, which is called XProc 3.0.</p>
                          <p>In this talk I would like to give an introduction to workflows for non-XML documents in XProc 3.0. To do this as practical as possible I decided to layout a typical workflow involving the necessity to deal with non-XML documents and to show you, how this could be done in XProc 3.0. Of course the workflow is a little bit of a made-up story, because it was chosen for the purpose of demonstration. But I think you will get an idea of what you can do with XProc 3.0 and will be able to apply it to your real-life use cases.</p>
                          <p>So the workflow is this: We have a bunch of ePUBs in a folder somewhere and we have been asked to design a workflow which analyses the content of the ePUB and creates an RDF metadata description and an inventory which has to be send to one of our inventory-servers which -\-for what reason ever-\- happens to understand only JSON. I will explain the details of this workflow later, but please keep in mind that it involves dealing with a lot of non-XML documents such as ZIP (the ePUB itself), plain text, graphics in JPEG, RDF and last but not least JSON.</p>
                          <p>The talk is divided in four parts, where the third part is the central one:</p>
                          <p>- Reminder: Non-XML documents in XProc 1.0</p>
                          <p>- The new document model in XProc 3.0</p>
                          <p>- Applying the model to design non-XML workflows</p>
                          <p>- Conclusion</p>
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <td>1100-1130</td>
                <td>Break</td>
              </tr>
              <tr>
                <td>1130-1215</td>
                <td>
                  <p><strong>Lightweight DevOps using ANT</strong><br/>Philip Hodder (Encodis Consulting)</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#phil">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="phil" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">Lightweight XML DevOps using ANT</h4>
                        </div>
                        <div class="modal-body">
                          <p>Many teams struggle with defining, documenting and following proper processes. A case study is described where a content delivery team of a major digital publisher was experiencing these problems when running transformation pipelines using XSLT and Schematron, as well as numerous other XML related tasks. The use of the Apache Ant build tool has allowed them to create a set of tools that to enforce an agreed development policy using a set of reusable macros. These macros have allowed the team to dramatically increase the build quality of deployed code, as well as to getting new team members productive more quickly. This experience has spurred the development of an open source equivalent of this macro library (whimsically entitled "XPantS") which is also described.</p>
                          
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <td>1215-1300</td>
                <td>
                  <p><strong>Writing an XSD 1.1 validator in XSLT 3.0</strong><br/>Michael H Kay (Saxonica)</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#kay">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="kay" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">Writing an XSD 1.1 validator in XSLT 3.0</h4>
                        </div>
                        <div class="modal-body">
                          <p>This paper will present a successfully completed project to write an XSD 1.1 validator using XSLT 3.0.</p>
                          <p>There are several motivations for attempting this; the most immediate was the need for a schema validator to run in the browser, and given the existence of XSLT 3.0 in the browser (in the form of Saxon-JS) writing the validator in XSLT 3.0 seems a more attractive choice than the alternative, of writing it in Javascript. The portability benefits of being able to do schema validation anywhere you can run XSLT 3.0 are an additional factor. </p>
                          <p>Possibly too, wider availability of XSD 1.1 validators will encourage those who publish XML Schemas for common standard vocabularies to take advantage of the powerful features introduced in version 1.1 of the XSD standard.</p>
                          <p>The second motivation was simply as a usability test of XSLT 3.0: this is a complex application, and it is useful to see whether XSLT 3.0 is up to the job.</p>
                          <p>The validator takes as input (a) the XML representation of the schema produced by compiling the XSD source under Saxon-EE (this is known as an SCM file, for schema component model), and (b) the instance document to be validated. As output it produces an XML report detailing the validation errors found (which can then be rendered in HTML using a further transformation, if required).</p>
                          <p>The overall conclusion is that it has been possible to write an XSD 1.1 processor with a very high level of W3C conformance using pure XSLT 3.0 code: the tools proved up to the task.</p>
                          
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <td>1300-1400</td>
                <td>Lunch</td>
              </tr>
              <tr>
                <td>1400-1445</td>
                <td>
                  <p><strong>When overlapping XML meets changing XML does confusion reign?</strong><br/>Robin La Fontaine (DeltaXML Ltd)</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#robin">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="robin" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">When overlapping XML meets changing XML does confusion reign?</h4>
                        </div>
                        <div class="modal-body">
                          <p>The issue of how best to represent overlapping hierarchy in XML has been the topic of a number of papers over the years. This paper is a further contribution to this important issue, but approaching the problem from a different direction. Our goal is to represent changes to documents, and one type of change is change to the markup hierarchy. Therefore our ultimate goal is to be able to represent not only changes to the hierarchy, typically resulting in overlapping hierarchy, but also changes to attributes and text. This is a more ambitious goal than simply representing overlapping hierarchy, and one aspect of this is to make a clear distinction between the different hierarchical structures and the text that corresponds with each one.</p>
                          
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <td>1445-1530</td>
                <td>
                  <p><strong>The XForms 2.0 Test Suite</strong><br/>Steven Pemberton (CWI)</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#pemberton">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="pemberton" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">The XForms 2.0 Test Suite</h4>
                        </div>
                        <div class="modal-body">
                          <p>XForms 1.0 and 1.1 both had test suites that consisted largely of static XForms documents. To run the tests you had to manually activate them one by one, and then visually confirm that the test had passed. If you wanted to add more cases to a test, it involved adding to the set of documents, or editing the individual documents.</p>
                          <p>The test suite for XForms 2.0 now being constructed takes a different
                            approach, the idea being that the tests should check themselves that they have passed, and most tests have a similar structure so that only data used needs to be altered to check new cases.
                          </p>
                          <p>Of course, for a language designed for user-interaction, some tests have to be based on physical interaction. But once you have confirmed that clicking on a button does indeed generate the activation event, all subsequent tests can generate the activation event without user intervention.</p>
                          <p>The introspection needed for tests to check the workings of the processor doing the testing can raise some challenging problems, such as how to test that the initial start-up event has been sent when the facilities for recording that fact have not yet been initialised.</p>
                          <p>This paper will consider the techniques used to create a self-testing XForms test suite, the problems encountered, and how they were solved.</p>
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <td>1530-1600</td>
                <td>Break</td>
              </tr>
              <tr>
                <td>1600-1645</td>
                <td>
                  <p>Closing Keynote: <strong>In Defense of the Lowly Angle Bracket</strong><br/>Debbie Lapeyre (Mulberry Technologies)</p>
                  <p>Thanks from organisers</p>
                </td>
              </tr>
              
            </tbody>
          </table>-->
        </div>
      </article>
      
      <!--<article>
        <h1>Conference Program</h1>
        <p class="lead">We are in the process finalizing the programme for Markup UK 2018. To see our exciting speaker lineup, have a look at our <a href="speakers.xhtml">Speaker Page</a>.</p>
      </article>-->
      
      <!--<article>
        <h1>Dates and Deadlines</h1>
        <table>
          <thead>
            <tr>
              <th>Date</th>
              <th>Deadline</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>2018-04-09</td>
              <td>Call for papers ends</td>
            </tr>
            <tr>
              <td>2018-04-30</td>
              <td>Feedback to authors</td>
            </tr>
            <tr>
              <td>2018-05-01</td>
              <td>Early Bird closes</td>
            </tr>
            <tr>
              <td>2018-05-21</td>
              <td>Full papers due</td>
            </tr>
          </tbody>
        </table>
      </article>-->
    </section>
    
    <section class="affiliates">

      <aside>
        <h2>Sponsors</h2>
        <div class="row">
          <p class="col-md-6"><a href="http://www.evolvedbinary.com/"><img src="img/evolved-binary-logo.png" width="90%" alt="Evolved Binary"/></a></p>
          <p class="col-md-6"><a href="http://www.saxonica.com/"><img src="img/logo_crop-mid-blue-background.gif" width="90%"  alt="Saxonica"/></a></p>
        </div>
        <div class="row">
          <p class="col-md-6"><a href="https://www.le-tex.de/en/company.html"><img src="img/letex-logo.png" width="85%" alt="le-tex"/></a></p>
          <p class="col-md-6"><a href="http://www.oxygenxml.com" title="Oxygen XML Editor"><img src="img/OxygenXMLEditorLogo.png" width="100%" alt="Oxygen XML Editor" border="0"/></a></p>
        </div>
        <div class="row">
          <p class="col-md-6"><a href="https://www.mercatorit.com/" title="Mercator"><img src="img/mercator-logo.png" width="85%" alt="Mercator IT Solutions" border="0"/></a></p>
          <p class="col-md-6"><a href="http://www.exeterpremedia.com" title="Exeter"><img src="img/exeterLogo.png" width="85%" alt="Exeter" border="0"/></a></p>
        </div>
        <div class="row">
          <p class="col-md-6"><a href="https://www.mulberrytech.com/" title="Exeter"><img src="img/mul-logo.png" width="90%" alt="Mulberry Technologies" border="0"/></a></p>
          <p class="col-md-6"></p>
        </div>
      </aside>

      <aside class="events">
        <h2>Sister events</h2>
        <div class="row">
          <p class="col-md-6">
            <p>
              <a href="http://www.xmlprague.cz"><img src="img/xmlprague-top-logo-13.png" alt="XML Prague" width="100%" /></a>
            </p>
            <p>
              <a href="http://www.balisage.net"><img src="img/BalisageLogotype.png" alt="Balisage" width="100%" /></a></p>
          </p>
          <p class="col-md-6"><a href="http://www.xmlsummerschool.com"><img src="img/xmlss.svg" alt="XML Summer School" width="85%" /></a></p>
        </div>
      </aside>

      
      <aside class="contact">
        <nav><!-- Removed class="contact" for now since it messes up Firefox -->
          <a class="twitter" href="https://twitter.com/MarkupUKorg">Follow us on Twitter</a>
          <a class="facebook" href="https://www.facebook.com/MarkupUKConference/">Like us on Facebook</a>
          <a class="linkedin" href="https://www.linkedin.com/company/markup-uk/">Connect with us on LinkedIn</a>
          <a class="email" href="mailto:info@markupuk.org">Email us at info@MarkupUK.org</a>
        </nav>
      </aside>

    </section>

    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"/>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"/>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"/>
  </body>
</html>
