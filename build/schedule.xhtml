<section class="content" xmlns='http://www.w3.org/1999/xhtml'>
      <article>
        
        <h1>Conference Programme</h1>
        
        <p>Early days still... why not start thinking about that paper now?</p>
        
        <!--<p>Please note that all times are British Summer Time (BST).</p>-->
        
        <!--<div>
          <a href="https://whova.com/embedded/event/marku_202105/?utc_source=ems">Schedule</a>
        </div>-->
        
        <!--<div><div title="Whova event and conference app" id="whova-agendawidget"><p id="whova-loading">Loading...</p></div><script src="https://whova.com/static/frontend/agenda_webpage/js/embedagenda.js?eid=marku_202105&amp;host=https://whova.com" type="text/javascript" id="embeded-agenda-script"></script><div id="whova-wrap"> Powered By <a class="brandlink" target="_blank" href="https://whova.com"><b>Whova</b></a><div id="whova-mgm"><a href="https://whova.com/virtual-conference-platform/" id="whova-emslink" target="_blank"> Virtual conference software </a></div></div><img style="display:none" src="https://whova.com/xems/apis/get_whova_tracking_image/?event_id=marku_202105&amp;track_id=agenda_webpage_added" /></div>-->
        
        <!--<div>
          
          <p><a href="#friday"><strong>Friday 21 May</strong></a> - <a href="#saturday"><strong>Saturday 22 May</strong></a></p>
          
          <table id="friday">
            <thead>
              <tr>
                <td>Friday</td>
                <td/>
              </tr>
            </thead>
            
            <tbody>
              <tr>
                <td>0930-0945</td>
                <td>Opening remarks</td>
              </tr>
              
              <tr>
                <td>0945-1045</td>
                <!-\- XForms 1, Steven P -\->
                <td>
                  <p><strong>XForms Hands-on (Tutorial) Part 1</strong></p>
                  <p><a href="speakers.html#steven-bio">Steven Pemberton</a> (CWI)*</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#steven1">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="steven1" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content" style="text-align: left;">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">XForms Hands-on (Tutorial)</h4>
                        </div>
                        <div class="modal-body">
                          <p>In the 50s, when the first programming languages were designed, computers cost millions, and relatively, programmers were almost free. Those programming languages therefore reflected that relationship: it didn't matter if it took a long time to program, as long as the resulting program ran as fast as possible.</p>
                          
                          <p>Now, that relationship has been reversed: compared to the cost of programmers, computers are almost free. And yet we are still programming them in direct descendants of the programming languages from the 50s: we are still telling the computers step by step how to solve the problem.</p>
                          
                          <p>Declarative programming is a new approach to applications: rather than describing exactly how to reach the solution, it describes what the solution should look like, and leaves more of the administrative parts of the program to the computer.</p>
                          
                          <p>One of the few declarative languages available is XForms, an XML-based language that despite its name is not only about forms. Large projects, at large companies such as the National Health Service, the BBC and Xerox, have shown that by using XForms, programming time and cost of applications can be reduced to a tenth!</p>
                          
                          <p>This hands-on tutorial is in two parts, each consisting of a rapid-fire sequence of around a dozen exercises, consisting of 5 minutes of presentation, followed by 5 minutes of coding. Each exercise consists of modifying an existing XForm to use the newly-learnt feature. The tutorial allows you to learn about the structure and workings of XForms, and gives you the opportunity to work on useful working programs.</p>
                          
                          <p>Part 1 introduces the main elements of the language; part 2 builds on part 1, and takes you through the more advanced parts.</p>
                          
                          <p>It is a “bring your own device” tutorial, requiring the installation of some files beforehand, and checking they are working. Attendees can work using the text editor of their choice.</p>
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              
              <tr>
                <td>1045-1100</td>
                <td>Break</td>
              </tr>
              
              <tr>
                <td>1100-1200</td>
                <!-\- XForms 2, Steven P -\->
                <td>
                  <p><strong>XForms Hands-on (Tutorial) Part 1</strong></p>
                  <p><a href="speakers.html#steven-bio">Steven Pemberton</a> (CWI)*</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#steven2">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="steven2" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content" style="text-align: left;">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">XForms Hands-on (Tutorial)</h4>
                        </div>
                        <div class="modal-body">
                          <p>In the 50s, when the first programming languages were designed, computers cost millions, and relatively, programmers were almost free. Those programming languages therefore reflected that relationship: it didn't matter if it took a long time to program, as long as the resulting program ran as fast as possible.</p>
                          
                          <p>Now, that relationship has been reversed: compared to the cost of programmers, computers are almost free. And yet we are still programming them in direct descendants of the programming languages from the 50s: we are still telling the computers step by step how to solve the problem.</p>
                          
                          <p>Declarative programming is a new approach to applications: rather than describing exactly how to reach the solution, it describes what the solution should look like, and leaves more of the administrative parts of the program to the computer.</p>
                          
                          <p>One of the few declarative languages available is XForms, an XML-based language that despite its name is not only about forms. Large projects, at large companies such as the National Health Service, the BBC and Xerox, have shown that by using XForms, programming time and cost of applications can be reduced to a tenth!</p>
                          
                          <p>This hands-on tutorial is in two parts, each consisting of a rapid-fire sequence of around a dozen exercises, consisting of 5 minutes of presentation, followed by 5 minutes of coding. Each exercise consists of modifying an existing XForm to use the newly-learnt feature. The tutorial allows you to learn about the structure and workings of XForms, and gives you the opportunity to work on useful working programs.</p>
                          
                          <p>Part 1 introduces the main elements of the language; part 2 builds on part 1, and takes you through the more advanced parts.</p>
                          
                          <p>It is a “bring your own device” tutorial, requiring the installation of some files beforehand, and checking they are working. Attendees can work using the text editor of their choice.</p>
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              
              <tr>
                <td>1200-1300</td>
                <td>Lunch</td>
              </tr>
              
              
              <tr>
                <td>1300-1345</td>
                <!-\- Tommie -\->
                <td>
                  <p><strong>Encouraging Tag Set Branching without Creating a Briar Patch</strong></p>
                  <p><a href="speakers.html#tommie-bio">Tommie Usdin</a> (Mulberry Technologies, Inc.)*</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#tommie1">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="tommie1" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content" style="text-align: left;">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">Encouraging Tag Set Branching without Creating a Briar Patch</h4>
                        </div>
                        <div class="modal-body">
                          <p>Customizing a tag set can be an easy way to get the vocabulary you need. It can also be a a journey filled with dead ends, trap doors, and slowly-revealed and difficult to identify problems. Like many public tag sets, JATS (the Journal Article Tag Suite) was designed to be customized. Our original expectation was that individual users would customize it, and while a few have done that to good effect, we have found that the major customizations have been by groups of users. BITS (the Book Interchange Tag Suite), NISO STS (Standards Tag Suite), and Manuscript Exchange Common Approach (MECA) are widely adopted customizations of JATS.</p>
                          <p>When users customize a tag set they expect to be able to use the existing infrastructure associated with that tag set, making changes to accommodate the changes they made. They often expect to intermingle their new documents with documents tagged to the original tag set and perhaps with documents tagged to other customizations of the source tag set. They expect this to work gracefully, easily, seamlessly. Sometimes it does, but sometimes it does not!</p>
                          <p>The "JATS Compatibility Meta-Model Description" was developed to help people who customize JATS create tag sets to create models that will coexist peacefully with existing JATS documents and with documents tagged to other JATS customizations.</p>
                          <p>It seems unlikely that the particulars of the JATS Compatibility Model will apply to other tag sets, but the principles behind the Meta-Model might be useful to other groups thinking about ways to make their families of tag sets flexible and compatible.</p>
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              
              
              
              <tr>
                <td>1345-1430</td>
                <!-\- David M -\->
                <td>
                  <p><strong>What's in a Schematron?</strong></p>
                  <p><a href="speakers.html#david-bio">David Maus</a> (Staats- und Universitätsbibliothek Hamburg)*</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#david1">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="david1" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content" style="text-align: left;">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">What's in a Schematron?</h4>
                        </div>
                        <div class="modal-body">
                          <p>Schematron is a rule based validation language for structured documents. It was designed by Rick Jelliffe in 1999 and standardized as ISO/IEC 19757-3 in 2006, 15 years ago. In 2020 work on the specification concluded: The working group was disbanded and the last edition of the specification, its draft not shared publicly for discussion with the Schematron community, put an end to Schematron as an Open Standard.</p>
                          
                          <p>While losing an Open Standard is annoying, especially given the circumstances that lead to the specification becoming proprietary, it gives the opportunity to look at the specification as an object of an analytic inquiry. What's in a Schematron? Which problems does Schematron address and how does it do it? How would a Schematron-like language look like in 2021?</p>
                          
                          <p>In this paper I will discuss three problem areas covered by Schematron: 1. Rule based validation; 2. Schema composition; and 3. Reporting. For each area I will show the issues involved, how Schematron addresses the problem, what conclusions can be drawn from it, and how a new rule based validation language could build on the Schematron experience in this particular area.</p>
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              
              <tr>
                <td>1430-1515</td>
                <!-\- Alain C -\->
                <td>
                  <p><strong>XSLTForms for the '20s</strong></p>
                  <p><a href="speakers.html#alain-bio">Alain Couthures</a> (agenceXML)*</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#alain1">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="alain1" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content" style="text-align: left;">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">XSLTForms for the '20s</h4>
                        </div>
                        <div class="modal-body">
                          <p>Since 2009, XSLTForms has been compatible with successive browser versions starting from Internet Explorer 4. It is based on XSLT 1.0, CSS and vanilla Javascript.</p>
                          
                          <p>XSLTForms modernization is required for perennity and evolutivity.</p>
                          
                          <h5>HTML5 notation for XForms and CSS</h5>
                          
                          <p>XSLTForms is now using an HTML5 notation for XForms elements replacing numerous DIV and SPAN embedded elements with only CSS classes to differentiate them.</p>
                          
                          <p>HTML5 is allowing custom elements and CSS classes can be defined for them. To avoid name conflicts, XForms elements are transformed into “xforms-*” elements (“xforms-input”, for example) and XForms attributes into “xf-*” attributes (“xf-selected”, for example).</p>
                          
                          <p>Inline XML instances and XML schemas have to be protected within SCRIPT elements with a not-supported type (“application/xml”, for example) to preserve letter cases.</p>
                          
                          <p>Because of CSS attribute selectors, CSS classes are powerful enough to manage custom elements visibility. For example, an XForms group without a binding will always be visible but, with a binding, an extra attribute (“xf-bound”) will be programmatically added.</p>
                          
                          <p>More custom sub elements are added, such as “xforms-body”, “xforms-help”, … to render XForms controls with HTML and CSS.</p>
                          
                          <h5>XQuery/XPath parser in Javascript</h5>
                          
                          <p>The XPath parser has been rewritten in Javascript to be executed just-in-time when an expression is to be evaluated for the first time.</p>
                          
                          <h5>XQueryX 3.1 to Javascript transpiler</h5>
                          
                          <p>The Javascript arrays resulting from the XPath/XQuery parser can now be converted into Javascript functions. Its body contains a sequence of instructions with a Reverse Polish Notation order. Path evaluations require “if” statements to stop when a step returns an empty sequence. Predicates are performed with inline functions to be called for each sequence item.</p>
                          
                          <h5>XForms 2.0 support in XSLTForms</h5>
                          
                          <p>XSLTForms is already supporting some major XForms 2.0 new features such as variables and AVT.</p>
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              
              <tr>
                <td>1515-1530</td>
                <td>Break</td>
              </tr>
              
              <tr>
                <td>1530-1615</td>
                <!-\- Mike Kay -\->
                <td>
                  <p><strong>&lt;transpile from=&quot;Java&quot; to=&quot;C#&quot; via=&quot;XML&quot; with=&quot;XSLT&quot;/&gt;</strong></p>
                  <p><a href="speakers.html#mike-bio">Michael H Kay</a> (Saxonica)*</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#mike1">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="mike1" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content" style="text-align: left;">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">&lt;transpile from=&quot;Java&quot; to=&quot;C#&quot; via=&quot;XML&quot; with=&quot;XSLT&quot;/&gt;</h4>
                        </div>
                        <div class="modal-body">
                          <p>This paper describes a project to convert a substantial piece of software (an XSLT processor, as it happens, but it could have been anything) from Java to C#, using an XML representation as the intermediate format, and using XSLT as the transformation language.</p>
                          
                          <p>Outline:</p>
                          <ul>
                            <li>The business requirement (why did we need to do this, and what were the constraints)</li>
                            
                            <li>The technical challenge (alternative approaches considered; why is the problem difficult; examples of transformations that are needed)</li>
                            
                            <li>The benefits of using XML and XSLT (XML as a human-readable and machine-processable representation of tree-structured information; XSLT as a transformation language focused on matching patterns in trees; examples of some of the complex patterns that need to be matched)</li>
                            
                            <li>Overall design of the solution (the processing pipeline)</li>
                            
                            <li>Selected points of interest (particular aspects of the solution showing innovative or advanced use of XSLT that might contain useful ideas for other projects)</li>
                            
                            <li>Achievements / conclusion / further work</li>
                          </ul>
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              
              <tr>
                <td>1615-1700</td>
                <!-\- Erik -\->
                <td>
                  <p><strong>Comprehensible XML</strong></p>
                  <p><a href="speakers.html#erik-bio">Erik Siegel</a> (Xatapult)*</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#erik1">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="erik1" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content" style="text-align: left;">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">Comprehensible XML</h4>
                        </div>
                        <div class="modal-body">
                          <p>Writing software, it is all too easy to forget that there is another side to it than just: it works. Most software goes through a life cycle of writing, testing debugging and maintenance. This makes it important that what you write is comprehensible, both for somebody else and yourself in a few months’ time. It reduces the chance of mistakes and bugs and shortens development time.</p>
                          <p>We have probably all seen, heard, or read something about how to write good code. We probably all to try to comply more or less, but given what we see around us, we do not always succeed.</p>
                          <p>This talk will try to provide directions, tips and tricks on how to make (in this case XML related) code more understandable. It will also provide background on why this important and why we should try to comply. How can we do this with minimum effort. It will be a mixture of things from literature and personal experience after 40 years of programming computers.</p>
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              
              <tr>
                <td>1700-1745</td>
                <!-\- Debbie -\->
                <td>
                  <p><strong>How Much Tag Set Documentation is Needed? How much is Too Much?</strong></p>
                  <p><a href="speakers.html#debbie-bio">Deborah A Lapeyre</a> (Mulberry Technologies, Inc.)*</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#debbie1">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="debbie1" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content" style="text-align: left;">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">How Much Tag Set Documentation is Needed? How much is Too Much?</h4>
                        </div>
                        <div class="modal-body">
                          <p>The more the better. Documentation is expensive, stick to the basics. If it isn't well documented people won't use it or, worse, won't use it consistently. JATS (The Journal Article Tag Suite) has documentation. A LOT of documentation. Documentation designed to introduce new users to the tag set. Documentation designed to support experienced users. Documentation to support people who are customizing JATS, including both advice on the mechanics and logic of making customizations. There are definitions, helpful remarks, tagged examples, extended essays. There is an International Standard that meets political needs and a site with non-normative documentation that meets practical needs. There are third party sites advising users on how to use the tag sets for best interoperability, and many organizations that ingest JATS provide (ans may insist on) local rules.</p>
                          
                          <p>It is entirely possible that this is the most heavily documented XML tag set of all time. Do other tags need this much documentation? Are there any parts of this would others find useful? After a guided tour of the JATS documentation, the audience can chime in: How much documentation does a tag set need? How much documentation does YOUR tag set need? What is useful? What is overkill? What audience most needs to be served?</p>
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              
              <!-\-<tr>
                <td>1800-2100</td>
                <td><strong>Drinks, Dinner, and DemoJam!</strong><br/></td>
              </tr>-\->
            </tbody>
          </table>
          
          
          <table id="saturday">
            <thead>
              <tr>
                <td>Saturday</td>
                <td/>
              </tr>
            </thead>
            
            <tbody>
              <tr>
                <td>0930-0945</td>
                <td>Opening remarks</td>
              </tr>
              
              <tr>
                <td>0945-1045</td>
                <!-\- XForms 1, Steven P -\->
                <td>
                  <p><strong>XForms Hands-on (Tutorial) Part 2</strong></p>
                  <p><a href="speakers.html#steven-bio">Steven Pemberton</a> (CWI)*</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#steven3">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="steven3" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content" style="text-align: left;">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">XForms Hands-on (Tutorial)</h4>
                        </div>
                        <div class="modal-body">
                          <p>In the 50s, when the first programming languages were designed, computers cost millions, and relatively, programmers were almost free. Those programming languages therefore reflected that relationship: it didn't matter if it took a long time to program, as long as the resulting program ran as fast as possible.</p>
                          
                          <p>Now, that relationship has been reversed: compared to the cost of programmers, computers are almost free. And yet we are still programming them in direct descendants of the programming languages from the 50s: we are still telling the computers step by step how to solve the problem.</p>
                          
                          <p>Declarative programming is a new approach to applications: rather than describing exactly how to reach the solution, it describes what the solution should look like, and leaves more of the administrative parts of the program to the computer.</p>
                          
                          <p>One of the few declarative languages available is XForms, an XML-based language that despite its name is not only about forms. Large projects, at large companies such as the National Health Service, the BBC and Xerox, have shown that by using XForms, programming time and cost of applications can be reduced to a tenth!</p>
                          
                          <p>This hands-on tutorial is in two parts, each consisting of a rapid-fire sequence of around a dozen exercises, consisting of 5 minutes of presentation, followed by 5 minutes of coding. Each exercise consists of modifying an existing XForm to use the newly-learnt feature. The tutorial allows you to learn about the structure and workings of XForms, and gives you the opportunity to work on useful working programs.</p>
                          
                          <p>Part 1 introduces the main elements of the language; part 2 builds on part 1, and takes you through the more advanced parts.</p>
                          
                          <p>It is a “bring your own device” tutorial, requiring the installation of some files beforehand, and checking they are working. Attendees can work using the text editor of their choice.</p>
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              
              <tr>
                <td>1045-1100</td>
                <td>Break</td>
              </tr>
              
              <tr>
                <td>1100-1200</td>
                <!-\- XForms 2, Steven P -\->
                <td>
                  <p><strong>XForms Hands-on (Tutorial) Part 2</strong></p>
                  <p><a href="speakers.html#steven-bio">Steven Pemberton</a> (CWI)*</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#steven4">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="steven4" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content" style="text-align: left;">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">XForms Hands-on (Tutorial)</h4>
                        </div>
                        <div class="modal-body">
                          <p>In the 50s, when the first programming languages were designed, computers cost millions, and relatively, programmers were almost free. Those programming languages therefore reflected that relationship: it didn't matter if it took a long time to program, as long as the resulting program ran as fast as possible.</p>
                          
                          <p>Now, that relationship has been reversed: compared to the cost of programmers, computers are almost free. And yet we are still programming them in direct descendants of the programming languages from the 50s: we are still telling the computers step by step how to solve the problem.</p>
                          
                          <p>Declarative programming is a new approach to applications: rather than describing exactly how to reach the solution, it describes what the solution should look like, and leaves more of the administrative parts of the program to the computer.</p>
                          
                          <p>One of the few declarative languages available is XForms, an XML-based language that despite its name is not only about forms. Large projects, at large companies such as the National Health Service, the BBC and Xerox, have shown that by using XForms, programming time and cost of applications can be reduced to a tenth!</p>
                          
                          <p>This hands-on tutorial is in two parts, each consisting of a rapid-fire sequence of around a dozen exercises, consisting of 5 minutes of presentation, followed by 5 minutes of coding. Each exercise consists of modifying an existing XForm to use the newly-learnt feature. The tutorial allows you to learn about the structure and workings of XForms, and gives you the opportunity to work on useful working programs.</p>
                          
                          <p>Part 1 introduces the main elements of the language; part 2 builds on part 1, and takes you through the more advanced parts.</p>
                          
                          <p>It is a “bring your own device” tutorial, requiring the installation of some files beforehand, and checking they are working. Attendees can work using the text editor of their choice.</p>
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              
              
              <tr>
                <td>1200-1300</td>
                <td>Lunch</td>
              </tr>
              
              
              <tr>
                <td>1300-1345</td>
                <!-\- Karin and Jamie -\->
                <td>
                  <p><strong>2021 The Future of Distributed Markup Systems or ‘Help my package became too big!’</strong></p>
                  <p><a href="speakers.html#karin-bio">Karin Bredenberg</a> (Kommunalförbundet Sydarkivera)*;<br/> <a href="speakers.html#jaime-bio">Jaime Kaminski</a> (University of Brighton)*</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#karin1">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="karin1" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content" style="text-align: left;">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">2021 The Future of Distributed Markup Systems or ‘Help my package became too big!’</h4>
                        </div>
                        <div class="modal-body">
                          <p>In 2019 you were introduced to the wonders of digital archiving and the eArchiving Building Block.
                            We explored how common specifications have been used for describing both Information Packages
                            and the Content Information Type Specifications (CITS) that can be placed in an Information Package.
                            This is a new world for some and an old world for others, so let’s do a short recap and introduce you
                            to the challenges that come next. </p>
                          <p>The eArchiving Building Block supported by The Connecting Europe Facility and the European
                            Commission creates common specifications based on pre-existing standards that everyone can use to
                            transfer data. The birth took place in 2018 and was a long one ending in 2019. The result was several
                            specifications for the different types of information packages that are found in the OAIS Reference
                            model [https://www.iso.org/standard/57284.html] and Content Information Type Specifications
                            (CITS) for structuring the content to be placed in the package. Tools were also developed, but let’s
                            focus on the foundation, the specifications. In the fall of 2019, a new two-year project was started,
                            which is now developing more specifications and enhancing those that have already been created.
                            But where does this winding path take us? To more specifications and more data to transfer? The
                            path will become more and more winding, the bigger the child gets and the more we feed it. </p>
                          <p>One of the challenges is the databases. They are the food that the baby needs to grow. You might
                            think this was an easy task, but I can assure you it is not. Databases need to be transformed into a
                            sustainable format. The eArchiving Building Block uses the SIARD standard (Software Independent
                            Archiving of Relational Database) developed by the Swiss Federal Archives. With the help of the
                            available tools, SIARD transforms the database into an XML-format. But, many other files can be
                            hidden in a database in the form of BLOBs and or CLOBs, which means that the total size of a
                            database can be huge. How do you transform that to an XML format with the files extracted and
                            referenced in the XML-document? Well, it is referenced in two XML-documents. First, in the XMLdocuments that are produced by the transformation, and second, in an information package XMLdocument. This later document tells us what files that are supposed to be transferred in the package
                            and a checksum so we can check that the file is the correct one when it arrives. Our child is getting
                            grumpy. Can we put all the files in one folder and describe them in just the two XML-documents? Of
                            course, we can, but that might give us an XML-document that takes 24 hours to validate if the
                            database was filled with files. How do we make our child happy? We just need to give them one
                            piece of candy and not the whole bag. This means that we need to set up recommendations and
                            even rules about splitting the package into more packages, so the candy is divided into more than
                            one bag. This is where we are today, deciding which candy goes into which bag. </p>
                          <p>At the same time, we can see that it is not only databases that are problematic. One of the new
                            Building Block specifications specifies how to transfer medical records. Here we run into the same
                            problem with the package being too big to handle. The solution is not to get more powerful
                            computers to handle the packages. It needs to be possible to do in different kinds of hardware and
                            software environments and with different staff skillsets. We cannot count on having access to the
                            funding to get what we want in the form of hardware, but we still have the task of preserving the
                            now for the future and thus need more candy bags. </p>
                          <p>Where do I find my packages?</p>
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              
              
              
              
              
              <tr>
                <td>1345-1430</td>
                <!-\- Robin and Nigel -\->
                <td>
                  <p><strong>An improved diff3 format using XML: diff3x</strong></p>
                  <p><a href="speakers.html#robin-bio">Robin La Fontaine</a> (DeltaXML Ltd)*; <a href="speakers.html#nigel-bio">Nigel Whitaker</a> (DeltaXML Ltd)*</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#robin1">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="robin1" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content" style="text-align: left;">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">An improved diff3 format using XML: diff3x</h4>
                        </div>
                        <div class="modal-body">
                          <p>There is no doubt that the diff and diff3 format has established itself as a well-used de-facto standard. It might seem presumptuous to suggest that it could be improved, or indeed that it needs to be improved. However, the original premise of line-based text files as the subject matter is now out of date with more structured information being the norm. Often this is in the form of programming source code where the layout tends to remain fairly consistent through edit cycles, but increasing use of JSON and XML pose particular difficulties for the simple line-based structure of diff3.</p>
                          
                          <p>In our paper at MarkupUK in 2019, we discussed some of the issues and suggested some minor improvements to diff3. These changes suffered from the common complaints of a retro-fit in that they did not sit comfortably with the original and only did half a job. The prevalence of GUIs also suggest that the actual syntax of a diff file is not as important as it was in that the emphasis has changed from human readability to interchange between two applications. For these reasons it seemed better to consider a different approach using the tools and formats that are now in common use, for example XML or JSON.</p>
                          
                          <p>What might diff3 look like as an XML format? Would the advantages of a new format make it worth swapping from the tried and tested diff3? Could existing GUI software easily adapt to a new format and, perhaps, even be simpler as a result?</p>
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              
              <tr>
                <td>1430-1515</td>
                <!-\- Steven P 5 -\->
                <td>
                  <p><strong>On the design of a self-referential tutorial</strong></p>
                  <p><a href="speakers.html#steven-bio">Steven Pemberton</a> (CWI)*</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#steven5">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="steven5" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content" style="text-align: left;">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">On the design of a self-referential tutorial</h4>
                        </div>
                        <div class="modal-body">
                          <p>XForms is a declarative programming language, with a different paradigm compared to traditional languages. Consequently learning materials are paramount, since it requires a new way of thinking about programming.</p>
                          
                          <p>A tutorial is a challenging educational setting, both for those learning as those instructing. Time is severely limited, and there is inevitably far more material on the subject than can possibly be taught in the time available. Unavoidably, compromises have to be made: do you make it deep and narrow, or broad and shallow? Should it be a teaser to tempt attendees to later self-study, or a starter, so that attendees have at least a working knowledge of some of the material.</p>
                          
                          <p>Most XForms tutorials had to date been of the lecture style, covering most of the language. However, a request for a hands-tutorial inspired a new approach.</p>
                          
                          <p>After attending several tutorials, the author realised that to optimally use the time available for exercises, attendees shouldn't be required to start from scratch, since precious time is lost dealing with trivial issues. Rather, the exercises should all require making a change to an existing, working, example, using the new knowledge, giving the advantage of hands-on, while minimising trivial details.</p>
                          
                          <p>The tutorial was thus designed as a rapid-fire sequence of exercises, with 5 minutes of presentation, and 5 minutes of coding. The exercises themselves are not stand-alone, but cumulative, each one building on an earlier one, so that at the end the attendee has a handful of small, but in themselves useful, applications. Although the tutorial was designed to be part of a live event, it also supports the use of self-study.</p>
                          
                          <p>The resulting tutorial is interesting in that it is not only *about* XForms, but it is also built *in* XForms, which in itself gave surprising possibilities.</p>
                          
                          <p>This paper discusses the method used to build the tutorial, the decisions taken, the techniques used, and the benefits that the approach gave.</p>
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              
              <tr>
                <td>1515-1530</td>
                <td>Break</td>
              </tr>
              
              <tr>
                <td>1530-1545</td>
                <td>Announcements</td>
              </tr>
              
              <tr>
                <td>1545-1630</td>
                <!-\- Tony -\->
                <td>
                  <p><strong>"FYI we're not looking to go to print": Restyling the Markup UK Proceedings</strong></p>
                  <p><a href="speakers.html#tony-bio">Tony Graham</a> (Antenna House)*</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#tony1">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="tony1" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content" style="text-align: left;">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">"FYI we're not looking to go to print": Restyling the Markup UK Proceedings</h4>
                        </div>
                        <div class="modal-body">
                          <p>Markup UK is a markup conference, and its conference proceedings start
                            life as DocBook XML. DocBook has a standard set of XSLT 1.0
                            stylesheets for transforming DocBook XML markup into other formats.</p>
                          
                          <p>Markup UK 2018 was put together very rapidly, so it having proceedings
                            at all is a tribute to the usefulness of the DocBook XSLT stylesheets.
                            However, the PDF proceedings were the stock DocBook styles done with a
                            Garamond font and with the addition of some frontmatter with sponsors
                            logos and acknowledgements.</p>
                          
                          <p>The Markup UK 2019 proceedings were produced using the same
                            customisation. Shortly after the
                            conference, it was agreed that the styles should be improved. The
                            full instructions for what to do were "FYI we're not looking to go to
                            print, if that influences any of your decisions."</p>
                          
                          <p>It did, but it didn't make the task any easier. This presentation
                            discusses the changes to the proceedings and how the DocBook
                            stylesheets were customised to achieve them.</p>
                          
                          <p>The changes fall into three areas: not going to print; Markup UK
                            look-and-feel; and accessibility.</p>
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              
              <tr>
                <td>1630-1715</td>
                <!-\- Liam -\->
                <td>
                  <p><strong>CSS Within: CSS From XSLT</strong></p>
                  <p><a href="speakers.html#liam-bio">Liam R E Quin</a> (Delightful Computing)*</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#liam1">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="liam1" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content" style="text-align: left;">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">CSS Within: CSS From XSLT</h4>
                        </div>
                        <div class="modal-body">
                          <p>A common problem when using XSLT to make HTML and CSS is keeping the XSLT, HTML and CSS synchronized. Changes to the XSLT that affect what HTML is generated necessitate corrsponding changes to CSS; changes to the CSS may necessitate changes to the XSLT. Over time there will be some elements in the HTML for which there is no style information in the CSS, or for which the style information is out of date; there will be rules in the CSS that are no longer needed, or, worse, that are out of date and are only sometimes triggered.</p>
                          
                          <p>Generating CSS from within XSLT, perhaps with one large xsl:text element, helps to reduce the divergence by making it easier to find CSS rules that affect a given element. But it is still easy to forget to update the CSS. A search for div.beer might not show up anything, but the CSS might have a selector fridge>* which matches beer when it's in the fridge. So it is not always trivial to locate the appropriate CSS rule to update.</p>
                          
                          <p>With XSLT 3 also comes expand-text="yes" and curly braces being potentially special inside text node constructors, conflicting with CSS syntax.</p>
                          
                          <p>CSS Within is a new way to integrate CSS generation with HTML generation to help reduce or eliminate these problems.</p>
                          
                          <p>The method used is to embded rule and media elements, in a CSS Within namespace, inside XSLT templates. This puts the CSS styles exactly where the XSLT developer needs them: right next to the XSLT instructions producing the elements that they style.</p>
                          
                          <p>CSS Within supports multiple stylesheets (for example for Web and PDF), and can run in pure XSLT or with extension instructions currently available for Saxon, in Java). Limited usage experience suggests that CSS Within makes HTML generation easier to maintain and more robust over time.</p>
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              
              <tr>
                <td>1715-1745</td>
                <td>
                  <p>Closing remarks and thanks from the organisers</p>
                </td>
              </tr>
              
            </tbody>
          </table>
        </div>-->
      </article>
      
      <article>
        <h1>Dates and Deadlines</h1>
        <table>
          <thead>
            <tr>
              <th>Date</th>
              <th>Deadline</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>2021-03-15</td>
              <td>Call for papers ends</td>
            </tr>
            <tr>
              <td>2021-04-12</td>
              <td>Feedback to authors</td>
            </tr>
            <tr>
              <td>2021-04-18</td>
              <td>Early Bird closes</td>
            </tr>
            <tr>
              <td>2021-05-11</td>
              <td>Full papers due</td>
            </tr>
            <tr>
              <td>2021-05-21</td>
              <td>First day of the conference</td>
            </tr>
            <tr>
              <td>2021-05-22</td>
              <td>Second day of the conference</td>
            </tr>
          </tbody>
        </table>
      </article>
    </section>