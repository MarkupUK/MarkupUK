<section class="content" xmlns='http://www.w3.org/1999/xhtml'>
      <article>
        <h1>Webinar Programme</h1>
        
        <p>Please note that this schedule is preliminary and is still subject to change!</p>
        
        <!--<h1>Conference Programme</h1>
        
        <p class="lead">2020 programme to be announced!</p>-->
        
    <p><strong>All webinars start at 4 PM BST (17.00 Central European Time) and are between 30 and
        45 minutes in length.</strong></p>
        
    <table>
      <caption/>
      <colgroup>
        <col/>
        <col/>
        <col/>
        <col/>
      </colgroup>
      <thead>
        <tr>
          <th>Date</th>
          <th>Webinar</th>
          <th>Presenter(s)</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>Thursday 4 June</td>
          <td>XProc 3.0 101, Part 1</td>
          <td><a href="#erik">Erik Siegel</a></td>
          <td>
            <p>XProc 3.0: An XML Pipeline Language is a language for describing operations to be
              performed on documents as a sequence of steps. This 101 webinar starts at the very
              beginning and introduces important XProc concepts based on practical examples.</p>
          </td>
        </tr>
        <tr>
          <td>Monday 8 June</td>
          <td>XProc 3.0 101, Part 2</td>
          <td><a href="#erik">Erik Siegel</a></td>
          <td>This 101 webinar builds on XProc 3.0 Part 1, introducing more XProc concepts based on
            practical examples. The webinar requires an understanding of the concepts explained in
            XProc 3.0 Part 1.</td>
        </tr>
        <tr>
          <td>Wednesday 10 June</td>
          <td>Schematron Report Customization</td>
          <td><a href="#david">David Maus</a></td>
          <td>Schematron is a rule-based validation language for making assertions about the
            presence or absence of patterns in XML trees. SchXslt and the Skeleton both implement
            Schematron as an XSLT transformation that creates a validation report when applied to a
            document. During the webinar David will show how to customize the validation report by
            using a callback API based on the xsl:import instruction. The webinar requires a basic
            understanding of Schematron and XSLT.</td>
        </tr>
        <tr>
          <td>Tuesday 16 June</td>
          <td>Working with JSON in XProc 3.0</td>
          <td><a href="#achim">Achim Berndzen</a></td>
          <td>A powerful new feature to the XProc language is the possibility to process documents
            other than XML. In this webinar Achim shows how to work with JSON documents. The webinar
            requires a basic understanding of XProc 3.0 as provided by the 101 webinars.</td>
        </tr>
        <tr>
          <td>Thursday 18 June</td>
          <td>Dealing with ZIP Documents in XProc 3.0</td>
          <td><a href="#erik">Erik Siegel</a></td>
          <td>This webinar shows how to handle ZIP files and their contents inside XProc 3.0
            pipelines. The webinar requires a basic understanding of XProc 3.0 as provided by the
            101 webinars.</td>
        </tr>
        <tr>
          <td>Monday 22 June</td>
          <td>Text Documents in XProc 3.0</td>
          <td><a href="#achim">Achim Berndzen</a></td>
          <td>A powerful new feature to the XProc language is the possibility to process documents
            other than XML. In this webinar Achim shows how to work with text documents. The webinar
            requires a basic understanding of XProc 3.0 as provided by the 101 webinars.</td>
        </tr>
        <tr>
          <td>Wednesday 24 June</td>
          <td>TBA</td>
          <td>TBA</td>
          <td>TBA</td>
        </tr>
        <tr>
          <td>Tuesday 30 June</td>
          <td>XProc Q&amp;A</td>
          <td><a href="#achim">Achim Berndzen</a> and <a href="#erik">Erik Siegel</a></td>
          <td>During this webinar Achim and Erik will answer XProc-related questions from the
            audience. Attendees are given the opportunity to send in their questions prior to the
            webinar.</td>
        </tr>
      </tbody>
    </table>
    <h3>Presenter Bios</h3>
    <p id="achim"><strong>Achim Berndzen</strong> (<a href="https://www.xml-project.com/"
        >www.xml-project.com</a>) is an XProc service provider. He is the implementer of
      MorganaXProc-III, an XProc 3.0 processor. He is part of the XProc 3.0 editorial team.</p>
    <p id="david"><strong>David Maus</strong>  (<a href="https://dmaus.name/">dmaus.name</a>) is
      head of research &amp; development at the Carl von Ossietzky State and University Library
      Hamburg. He is the lead developer and maintainer of SchXslt, an XSLT-based Schematron
      processor.</p>
    <p id="erik"><strong>Erik Siegel</strong> (<a href="http://xatapult.com/">xatapult.com</a>) is a
      Content Engineer and XML specialist working from The Netherlands.He is part of the XProc 3.0
      editorial team.</p>
        
        <!--<p class="lead">Conference Preliminary Programme</p>-->
        
        <!--<table style="text-align: left">
          <colgroup>
            <col/>
            <col/>
          </colgroup>
          <tbody>
            <tr>
              <td>
                <p><strong>Paper Title</strong></p>
              </td>
              <td>
                <p><strong>Author(s)</strong></p>
              </td>
            </tr>
            <tr>
              <td>
                <p>&lt;Angle-brackets/&gt; on the Branch Line - (model) railway engineering with XML technologies</p>
                <!-\- Trigger the modal with a button -\->
                <button type="button" data-toggle="modal" data-target="#lumley">Abstract</button>
                
                <!-\- Modal -\->
                <div class="modal fade" id="lumley" role="dialog">
                  <div class="modal-dialog">
                    
                    <!-\- Modal content-\->
                    <div class="modal-content" style="text-align: left;">
                      <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal"></button>
                        <h4 class="modal-title">&lt;Angle-brackets/&gt; on the Branch Line - (model) railway engineering with XML technologies</h4>
                      </div>
                      <div class="modal-body">
                        <p>As a retirement 'hobby', somewhat removed from the computing milieu, the author has started building a model railway in his garden. Surveying the extant tools for designing such layouts and finding them not quite right, he started building a design tool himself, using the familiar technologies of XSLT3 and SVG executing in a browser, employing Saxon-JS as the processing platform. The results of this were demonstrated, with some success, at Markup UK in 2018. This paper describes the design of this tool in some detail, as well as developments since that demonstration.
                        </p>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                      </div>
                    </div>
                    
                  </div>
                </div>
              </td>
              <td>
                <p><strong>John Lumley (jwLResearch)*</strong></p>
              </td>
            </tr>
            <tr>
              <td>
                <p>Documenting XML Structures</p>
                <!-\- Trigger the modal with a button -\->
                <button type="button" data-toggle="modal" data-target="#siegel">Abstract</button>
                
                <!-\- Modal -\->
                <div class="modal fade" id="siegel" role="dialog">
                  <div class="modal-dialog">
                    
                    <!-\- Modal content-\->
                    <div class="modal-content" style="text-align: left;">
                      <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal"></button>
                        <h4 class="modal-title">Documenting XML Structures</h4>
                      </div>
                      <div class="modal-body">
                        <p>There are lots of XML structures that need some kind of end-user documentation to be able to use them effectively. Its not easy to come up with a format that is both easy to understand and easy to create and maintain. Existing software for this is not always helpful. This talk will explore the this subject and look at from various angles.</p>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                      </div>
                    </div>
                    
                  </div>
                </div>
              </td>
              <td>
                <p><strong>Erik Siegel (Xatapult)*</strong></p>
              </td>
            </tr>
            <tr>
              <td>
                <p>An improved diff3 format for changes and conflicts in tree structures</p>
                <!-\- Trigger the modal with a button -\->
                <button type="button" data-toggle="modal" data-target="#lafontaine">Abstract</button>
                
                <!-\- Modal -\->
                <div class="modal fade" id="lafontaine" role="dialog">
                  <div class="modal-dialog">
                    
                    <!-\- Modal content-\->
                    <div class="modal-content" style="text-align: left;">
                      <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal"></button>
                        <h4 class="modal-title">An improved diff3 format for changes and conflicts in tree structures</h4>
                      </div>
                      <div class="modal-body">
                        <p>There are some pieces of software, and some formats, that are de-facto standards and have been around for decades. One of these is the diff3 format for representing changes and conflicts in text documents. Diff3 works well for unstructured text documents that are divided into lines. It works surprisingly well for pretty-printed source code and similar documents. But it has frustrating limitations when used for XML or JSON or similar tree-based data formats.</p>
                        <p>Can we improve on diff3 without making it too complicated? Can the existing representation of changes and conflicts be extended to handle tree-based data? This paper seeks to answer these questions and to describe how further benefits can be enjoyed by using XML or JSON as the basis for showing conflicts and changes.</p>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                      </div>
                    </div>
                    
                  </div>
                </div>
              </td>
              <td>
                <p><strong>Robin La Fontaine (DeltaXML Ltd)*; Nigel A Whitaker (DeltaXML Ltd)</strong></p>
              </td>
            </tr>
            <tr>
              <td>
                <p>Scrap the App, Keep the Data</p>
                <!-\- Trigger the modal with a button -\->
                <button type="button" data-toggle="modal" data-target="#davoti">Abstract</button>
                
                <!-\- Modal -\->
                <div class="modal fade" id="davoti" role="dialog">
                  <div class="modal-dialog">
                    
                    <!-\- Modal content-\->
                    <div class="modal-content" style="text-align: left;">
                      <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal"></button>
                        <h4 class="modal-title">Scrap the App, Keep the Data</h4>
                      </div>
                      <div class="modal-body">
                        <p>Whether by reacting swiftly to shifting market conditions and disruptive technologies or by growing through mergers and acquisitions, the ability to adapt is critical to success in the digital age.</p>
                        <p>As business processes and workflows evolve, new technologies and systems are constantly introduced to support them. Over time, IT estates become fragmented, and the number of legacy systems increases year by year. Valuable data ends up in isolated silos, only accessible via unnecessary applications that are expensive to maintain and license or are approaching the end of life.</p>
                        <p>This paper suggests a generic approach to transform arbitrary relational data into aggregated, hierarchical form and build a thin application to provide read access to end users.</p>
                        <p>In my presentation, I would like to point out why the relational model falls short when it comes to data aggregation.</p>
                        <p>XML can easily model both relational and hierarchical data. It's an excellent choice for data re-modeling and also for building a thin, data access application.</p>
                        <p>The approach I want to share with the audience is based on experience from multiple projects. </p>
                        <p>XML "bricks" used in the solution:</p>
                        <ul>
                          <li>processing pipeline configuration as XML (Apache Ant)</li>
                          <li>XSLT</li>
                          <li>XQuery</li>
                          <li>XML Database</li>
                        </ul>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                      </div>
                    </div>
                    
                  </div>
                </div>
              </td>
              <td>
                <p><strong>Barnabas Davoti (Ovitas AS)*</strong></p>
              </td>
            </tr>
            <tr>
              <td>
                <p>Software we have lost — the mortar that held the bricks together</p>
                <!-\- Trigger the modal with a button -\->
                <button type="button" data-toggle="modal" data-target="#flynn">Abstract</button>
                
                <!-\- Modal -\->
                <div class="modal fade" id="flynn" role="dialog">
                  <div class="modal-dialog">
                    
                    <!-\- Modal content-\->
                    <div class="modal-content" style="text-align: left;">
                      <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal"></button>
                        <h4 class="modal-title">Software we have lost — the mortar that held the bricks together</h4>
                      </div>
                      <div class="modal-body">
                        <p>Since the first days of SGML, there has been a variety of software to parse, validate, analyse, format, store, search, and extract the information.  Some of this was what we now call Open Source, particularly the utilities, but the majority of applications were normal commercial offerings.</p>
                        <p>In the course of time, many of these have become unavailable, for assorted reasons, with the result is that some very useful systems have been lost, and replacements are not as effective.</p>
                        <p>This research attempts to catalogue and analyse a collection of XML and SGML software that is either off the market, or only available within a different product, and thus not accessible to users.  The objective is to see if there are still ways to “shorten the distance between the bricks” that are not otherwise provided for.</p>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                      </div>
                    </div>
                    
                  </div>
                </div>
              </td>
              <td>
                <p><strong>Peter Flynn (Silmaril Consultants)*</strong></p>
              </td>
            </tr>
            <tr>
              <td>
                <p>Beyond the brick, for the past in the future, you find the archive!</p>
                <!-\- Trigger the modal with a button -\->
                <button type="button" data-toggle="modal" data-target="#bredenberg">Abstract</button>
                
                <!-\- Modal -\->
                <div class="modal fade" id="bredenberg" role="dialog">
                  <div class="modal-dialog">
                    
                    <!-\- Modal content-\->
                    <div class="modal-content" style="text-align: left;">
                      <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal"></button>
                        <h4 class="modal-title">Beyond the brick, for the past in the future, you find the archive!</h4>
                      </div>
                      <div class="modal-body">
                        <p>The statement that XML is dead is as wrong as celebrating Christmas on midsummer night’s eve! Imagine making an archival soup based on international standards using XML, with one municipal archive, two regional archives, five national archives and the European Commission’s eArchiving Building block thrown into the mix. This is what we are going to attempt.</p>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                      </div>
                    </div>
                    
                  </div>
                </div>
              </td>
              <td>
                <p><strong>Karin Bredenberg (The Swedish National Archives)*; Jaime Kaminski (University of
                  Brighton)</strong></p>
              </td>
            </tr>
            <tr>
              <td>
                <p>Everyone Knows What a Dragon Looks Like</p>
                <!-\- Trigger the modal with a button -\->
                <button type="button" data-toggle="modal" data-target="#usdin">Abstract</button>
                
                <!-\- Modal -\->
                <div class="modal fade" id="usdin" role="dialog">
                  <div class="modal-dialog">
                    
                    <!-\- Modal content-\->
                    <div class="modal-content" style="text-align: left;">
                      <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal"></button>
                        <h4 class="modal-title">Everyone Knows What a Dragon Looks Like</h4>
                      </div>
                      <div class="modal-body">
                        <p>We are overwhelmed by competing standards, technologies, and approaches to solving problems we may or may not understand and may or may not have anticipated. Each of us individually, and we as a community, have limited resources and want to concentrate our energies where they are most likely to be successful. Selection from among the cornucopia of options is often made more difficult by our preconceived notions of the shape, source, and promulgator of appropriate technologies. In many cases we seek, and occasionally we find, a powerful tool that seems to address all of our problems. The quest for such tools has led many of us to become standards junkies or technology evangelists. The belief that we have created or identified such a tool leads some of us to become missionaries promoting the use of a standard, a paradigm, or even a tool. In the children's book "Everyone Knows what a Dragon Looks Like", illustrated by Mercer Mayer, Jay Williams raises questions about the recognition and appropriate use of powerful tools. From it, we can learn to be little more skeptical of our ability to know the tools we need when we see them.</p>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                      </div>
                    </div>
                    
                  </div>
                </div>
              </td>
              <td>
                <p><strong>Tommie Usdin (Mulberry Technologies, Inc.)*</strong></p>
              </td>
            </tr>
            <tr>
              <td>
                <p>Taking Schematron QuickFix to the Next Level</p>
                <!-\- Trigger the modal with a button -\->
                <button type="button" data-toggle="modal" data-target="#nadolu">Abstract</button>
                
                <!-\- Modal -\->
                <div class="modal fade" id="nadolu" role="dialog">
                  <div class="modal-dialog">
                    
                    <!-\- Modal content-\->
                    <div class="modal-content" style="text-align: left;">
                      <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal"></button>
                        <h4 class="modal-title">Taking Schematron QuickFix to the Next Level</h4>
                      </div>
                      <div class="modal-body">
                        <p>The Schematron QuickFix (SQF) language can be used to improve efficiency and quality when editing XML documents. You can define actions that will add complex XML structure in your documents, or make modifications in multiple places, or actions that will convert an XML structure into another. These changes are made by keeping the document structure valid and conform to your project specification and will help the content writer add content more easily and without making mistakes.</p>
                        <p>To build complex actions you can to mix Schematron QuickFix language with ISO Schematron, or with different versions of XSLT and XPath, or you can define your own extensions using programming languages such as Java. This way, you can perform modifications in multiple external documents, or display dialog boxes to get input from your users, or use complex algorithms for processing the content of the documents.</p>
                        <p>The Schematron QuickFix is a modular language. Even though it is simple (having only four types of operations that can be performed: add, delete, replace, and string replace), new types of operations can be created (such as wrap, unwrap, rename, or join). This can be implemented by using abstract quick fixes and by creating libraries of quick fixes that can be reused for various different XML vocabularies (such as DITA, DocBook. TEI). By using a library of quick fixes will help the Schematron Quick Fixes developers to create the actions more easily and reuse the quick fixes created by others.</p>
                        <p>This presentation will focus on some interesting use-cases and examples of Schematron Quick Fixes that can be easily adapted to your projects. The examples will include both abstract quick fixes and complex quick fixes that use XSLT and Java.</p>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                      </div>
                    </div>
                    
                  </div>
                </div>
              </td>
              <td>
                <p><strong>Octavian Nadolu (Syncro Soft)*</strong></p>
              </td>
            </tr>
            <tr>
              <td>
                <p>Validating @selector: a regular expression adventure</p>
                <!-\- Trigger the modal with a button -\->
                <button type="button" data-toggle="modal" data-target="#bauman">Abstract</button>
                
                <!-\- Modal -\->
                <div class="modal fade" id="bauman" role="dialog">
                  <div class="modal-dialog">
                    
                    <!-\- Modal content-\->
                    <div class="modal-content" style="text-align: left;">
                      <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal"></button>
                        <h4 class="modal-title">Validating @selector: a regular expression adventure</h4>
                      </div>
                      <div class="modal-body">
                        <p>The TEI recently introduced a new attribute, @selector, whose value (by
                          default) is “a selector … CSS selector syntax will be used.” The TEI does not
                          provide any validation constraints on @selector, defining it as teidata.text (which
                          boils down to the RelaxNG string datatype).</p>
                        <p>This strikes me as insufficient; formal syntactic validation of @selector is in order.
                          The TEI does not say which version of CSS to use; I chose CSS3. The only
                          formal constraint system available in the TEI schema language (other than
                          enumerated lists of values and XSD datatypes) is the W3C regular expression
                          language. Thus I set about writing a regular expression to validate CSS3
                          selectors.</p>
                        <p>This presentation will be both about the process of creating said regular
                          expression, and the result. The result is a regular expression that is somewhat
                          long—just over 18,300 characters—that I believe correctly matches valid CSS3
                          selectors and correctly fails to match strings that are not valid CSS3 selectors.
                          If it turns out I am mistaken, I would like to learn that.</p>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                      </div>
                    </div>
                    
                  </div>
                </div>
              </td>
              <td>
                <p><strong>Syd Bauman (Northeastern University Digital Scholarship Group)*</strong></p>
              </td>
            </tr>
            <tr>
              <td>
                <p>Generating documents from XQuery annotations</p>
                <!-\- Trigger the modal with a button -\->
                <button type="button" data-toggle="modal" data-target="#bunce">Abstract</button>
                
                <!-\- Modal -\->
                <div class="modal fade" id="bunce" role="dialog">
                  <div class="modal-dialog">
                    
                    <!-\- Modal content-\->
                    <div class="modal-content" style="text-align: left;">
                      <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal"></button>
                        <h4 class="modal-title">Generating documents from XQuery annotations</h4>
                      </div>
                      <div class="modal-body">
                        <p>The paper describes an implementation of an xqDoc.org  documentation generator. A focus of this implementation is XQuery annotation support. In 2014 the xqDoc schema was updated to include markup to capture XQuery annotations, however existing renderers have often not been updated to make use of this.</p>
                        <p>A major driver for annotation support is documenting XQuery web applications built using the RESTXQ standard. RESTXQ defines a standard set of XQuery annotations that can be used to define RESTful Web Services from XQuery. Annotations are also being used to define frameworks for unit testing, user permissioning and web socket interfaces. Annotations are code markup that the runtime environment may choose to use to wire-in additional external functionality to XQuery applications.</p>
                        <p>The xqdoc implementation is open source. It is largely written in XQuery and runs with recent versions of BaseX. It generates static, stand alone HTML5 and XML output. The included XQuery library modules can also be used to assist in the generation other related documentation artefacts. In the case of RESTXQ these could be the generation of openAPI(swagger) and WADL documents.</p>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                      </div>
                    </div>
                    
                  </div>
                </div>
              </td>
              <td>
                <p><strong>Andrew p Bunce (Quodatum Ltd)*</strong></p>
              </td>
            </tr>
            <tr>
              <td>
                <p>XMLPaper: XML-based Conference Paper Workflow</p>
                <!-\- Trigger the modal with a button -\->
                <button type="button" data-toggle="modal" data-target="#talau">Abstract</button>
                
                <!-\- Modal -\->
                <div class="modal fade" id="talau" role="dialog">
                  <div class="modal-dialog">
                    
                    <!-\- Modal content-\->
                    <div class="modal-content" style="text-align: left;">
                      <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal"></button>
                        <h4 class="modal-title">XMLPaper: XML-based Conference Paper Workflow</h4>
                      </div>
                      <div class="modal-body">
                        <p>Popular conference management systems are monolithic solutions that are used across many fields and by very diverse audiences. As a result, these systems have rigid technology choices for paper format: PDF, TeX or Word which have limitations compared to a structured format such as XML. In addition, they do not cover all the steps in the paper submission lifecycle such as: collaboration between authors.</p>
                        <p>We propose a new solution for conference paper submission management that tries to improve the user experience in several areas: authors tooling setup, collaboration between authors, multi-step review processes, multi-format proceedings publishing.This paper will present a typical conference paper submission workflow and identify its steps, the stakeholders and the tools and technologies used. We will then present how our solution improves user experience of each of the stakeholders.</p>
                        <p>In this solution, the documents are authored in the an XML format, that supports publishing both as PDF and web portal. The output format is customizable and clearly communicated to authors so that they can preview how the paper will be published. Authors have a very intuitive user interface to draft the paper and to collaborate in cases where a paper has multiple authors. Reviewers can choose to review either the published PDF or directly on the source. In case of multi-round reviews, they can see the changes made between different revisions, thus being able to focus on the last updates.</p>
                        <p>From a technical point of view, the solution is composed from off-the-shelf Web services with a thin layer of orchestration. It may to be used together with a regular Conference Management System, replacing parts of its functionality.</p>
                        <p>To conclude the paper, we analyze how this solution is similar with other workflows related to content creation in a company, such as creating release notes or datasheets for a product.</p>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                      </div>
                    </div>
                    
                  </div>
                </div>
              </td>
              <td>
                <p><strong>Cristian Talau (Syncro Soft)*</strong></p>
              </td>
            </tr>
            <tr>
              <td>
                <p>XQuery for Data Workers</p>
                <!-\- Trigger the modal with a button -\->
                <button type="button" data-toggle="modal" data-target="#couthures">Abstract</button>
                
                <!-\- Modal -\->
                <div class="modal fade" id="couthures" role="dialog">
                  <div class="modal-dialog">
                    
                    <!-\- Modal content-\->
                    <div class="modal-content" style="text-align: left;">
                      <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal"></button>
                        <h4 class="modal-title">XQuery for Data Workers</h4>
                      </div>
                      <div class="modal-body">
                        <p>A data worker is a running program which manipulates data. It can get data from various sources then transform it and save, or send, the resulting data. A common usage for data workers is interfaces between applications.</p>
                        <p>XQuery is a data-oriented language which is not bound to databases and which is able to format data conveniently as text or XML. Many implementations have added function libraries to access file system, send HTTP requests, and so on... XQuery is a high-level programming language because repetitive operations such as loading a document from anywhere just requires the minimal information to be provided.</p>
                        <p>Considered requirements for a new open source XQuery implementation have been no platform limitation, light deployment, extensibility, asynchronous processing, no big pressure on performance: Javascript+NodeJS has been chosen (with possible, but limited, run within browsers).</p>
                        <p>This implementation is named “Fleur”. It supports XQuery/XQuery Update Facility 3.1 (not full conformance yet) upon its own DOM Level 3 (and browsers DOM). XQuery source is compiled into XQueryX structure which is stored in a Javascript array of arrays.</p>
                        <p>Fleur can process non-XML documents as XML documents with extensions at DOM level. Internally, Fleur manipulates everything as nodes, computed values been always stored into orphan atomic nodes.</p>
                        <p>Parsing/serializing non-XML sources is then implemented just at DOM level according to media-type. Experimentally, CSV files and Excel files are directly loaded into 2-dimension sequences.</p>
                        <p>Fleur CLI includes the possibility of launching an HTTP server. This server executes .xqy pages. XForms, with XSLTForms, can be used to both submit parameters as data to the Worker and render data returned by the Worker.</p>
                        <p>Fleur has already been used in various situations (XLSForm to XForms, dashboards, OFX conversion). Fleur will be integrated in XSLTForms for XForms 2.0 compliance. XForms actions could then be developed with XQuery Update Facility syntax.</p>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                      </div>
                    </div>
                    
                  </div>
                </div>
              </td>
              <td>
                <p><strong>Alain Couthures (agenceXML)*</strong></p>
              </td>
            </tr>
            <tr>
              <td>
                <p>Dispelling Myths About Markup Formats</p>
                <!-\- Trigger the modal with a button -\->
                <button type="button" data-toggle="modal" data-target="#quin">Abstract</button>
                
                <!-\- Modal -\->
                <div class="modal fade" id="quin" role="dialog">
                  <div class="modal-dialog">
                    
                    <!-\- Modal content-\->
                    <div class="modal-content" style="text-align: left;">
                      <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal"></button>
                        <h4 class="modal-title">Dispelling Myths About Markup Formats</h4>
                      </div>
                      <div class="modal-body">
                        <p>Misunderstandings about the goals and strengths of different document and data interchange formats can lead to suboptimal decisions. Such misunderstandings appear widespread. The purpose of this paper is to suggest areas in which each format has strengths, and to provide clear explanations that people can use to place XML in the context of other current markup systems.</p>
                        <p>Misconceptions about XML include statements such as “XML was designed for Web services and therefore unsuitable for documents;” “XML was designed to replace HTML and has failed;” “XML cannot transmit semantics of any kind;” “XML is dead.”  In fact, XML is alive and well.</p>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                      </div>
                    </div>
                    
                  </div>
                </div>
              </td>
              <td>
                <p><strong>Liam R E Quin (Delightful Computing)*</strong></p>
              </td>
            </tr>
            <tr>
              <td>
                <p>Subcheck — a validation framework</p>
                <!-\- Trigger the modal with a button -\->
                <button type="button" data-toggle="modal" data-target="#tai">Abstract</button>
                
                <!-\- Modal -\->
                <div class="modal fade" id="tai" role="dialog">
                  <div class="modal-dialog">
                    
                    <!-\- Modal content-\->
                    <div class="modal-content" style="text-align: left;">
                      <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal"></button>
                        <h4 class="modal-title">Subcheck — a validation framework</h4>
                      </div>
                      <div class="modal-body">
                        <p>This paper will introduce an operational perspective: how a research question and master thesis ended up in practice and turned into a product. We want to show which requirements led to the solutions, how they were implemented, and which problems still remain to be solved.</p>
                        <p>One of the main application areas of XML is the exchange of data between business partners. The data is in an agreed structured form that will usually be checked at the receiver’s end. It needs to be “validated” such that syntax and values of the data respects rules made in the agreement. But not only the receiver needs to check the data. To avoid rejection by the receiving business partner, the sender might want to verify that the data does not break any of these rules. Often such document data is made not only for one purpose and receiver, different business partners may have overlapping but slightly different rule sets and use-cases.</p>
                        <p>This is especially true with publishing-houses or media companies, where players share lot of the same grammar and constraints on data, yet each format has been enriched with some “house- rules” and recommendations that vary slightly. For instance media subtitles encoded in TTML might be perfectly valid according to a given schema, but still in violation of guidelines, business rules and recommendations.</p>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                      </div>
                    </div>
                    
                  </div>
                </div>
              </td>
              <td>
                <p><strong>Andreas Tai (IRT - Institut fuer Rundfunktechnik GmbH)*; Michael Seiferle (BaseX
                  GmbH)</strong></p>
              </td>
            </tr>
            <tr>
              <td>
                <p>xprocedit, A Browser-Based Open-Source XProc Editor</p>
                <!-\- Trigger the modal with a button -\->
                <button type="button" data-toggle="modal" data-target="#imsieke">Abstract</button>
                
                <!-\- Modal -\->
                <div class="modal fade" id="imsieke" role="dialog">
                  <div class="modal-dialog">
                    
                    <!-\- Modal content-\->
                    <div class="modal-content" style="text-align: left;">
                      <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal"></button>
                        <h4 class="modal-title">xprocedit, A Browser-Based Open-Source XProc Editor</h4>
                      </div>
                      <div class="modal-body">
                        <p>A visual XProc editor can serve at least two purposes: Communicating the process flow to non-programmers and easing the notoriously steep learning curve for programmers.</p>
                        <p>An implementation using the Javascript framework joint.js and the in-browser XSLT 3 processor Saxon-JS is demonstrated, along with the challenges of supporting XProc’s peculiarities in a generic graph editing framework.</p>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                      </div>
                    </div>
                    
                  </div>
                </div>
              </td>
              <td>
                <p><strong>Marco Geue (Hochschule Merseburg); Gerrit Imsieke (le-tex publishing services
                  GmbH)*</strong></p>
              </td>
            </tr>
            <tr>
              <td>
                <p>Accessibility matters</p>
                <!-\- Trigger the modal with a button -\->
                <button type="button" data-toggle="modal" data-target="#graham">Abstract</button>
                
                <!-\- Modal -\->
                <div class="modal fade" id="graham" role="dialog">
                  <div class="modal-dialog">
                    
                    <!-\- Modal content-\->
                    <div class="modal-content" style="text-align: left;">
                      <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal"></button>
                        <h4 class="modal-title">Accessibility matters</h4>
                      </div>
                      <div class="modal-body">
                        <p>XML, by itself, does not have any support for accessibility. XML is extremely flexible, but it needs to flex in the right directions if it is going to support the information necessary to make a document accessible. This session is a guided tour of some of the features of the HTML, Web Content Accessibility Guidelines (WCAG), and PDF/UA (Universal Accessibility) standards. It concentrates on file formats rather than User Agent behaviour, since the information needed to make accessible HTML or PDF needs to be included in, or able to be inferred from, the source XML.</p>
                        <p>However, it’s rarely the raw XML that is presented to users. The session will also stray into some aspects of styling the content to make it more accessible.</p>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                      </div>
                    </div>
                    
                  </div>
                </div>
              </td>
              <td>
                <p><strong>Tony Graham (Antenna House)*</strong></p>
              </td>
            </tr>
            <tr>
              <td>
                <p>XSpec in the Cloud with Diamonds</p>
                <!-\- Trigger the modal with a button -\->
                <button type="button" data-toggle="modal" data-target="#cirulli">Abstract</button>
                
                <!-\- Modal -\->
                <div class="modal fade" id="cirulli" role="dialog">
                  <div class="modal-dialog">
                    
                    <!-\- Modal content-\->
                    <div class="modal-content" style="text-align: left;">
                      <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal"></button>
                        <h4 class="modal-title">XSpec in the Cloud with Diamonds</h4>
                      </div>
                      <div class="modal-body">
                        <p>Running XSpec tests in a development team is usually performed via a CI server/service. However, this comes with limitations related to the use of private repositories and to the cost and burden of administering CI servers.</p>
                        <p>This paper describes an alternative approach for running XSpec tests from private repositories using a serverless architecture built on AWS Lambda. It describes the technical configuration and discusses the benefits, cost optimization, and constraints of a serverless architecture for running XSpec tests.</p>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                      </div>
                    </div>
                    
                  </div>
                </div>
              </td>
              <td>
                <p><strong>Sandro Cirulli (XSpec)*</strong></p>
              </td>
            </tr>
          </tbody>
          
        </table>-->
        
        
        
        <!--<p>We'll be announcing both the preconference day tutorials and the main conference programme within the next few days. Please check back often!</p>-->
        
        
        <!--<div>
          
          <p><a href="#friday"><strong>Friday</strong></a> - <a href="#saturday"><strong>Saturday</strong></a> - <a href="#sunday"><strong>Sunday</strong></a></p>
          
          
          
          <table id="friday">
            <thead>
              <tr>
                <td>Friday</td>
                <td/>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>0845-0930</td>
                <td> Registration </td>
              </tr>
              <tr>
                <td>0930-1100</td>
                <td>
                  <p><strong>Declarative Applications with XForms</strong></p>
                  <p><a href="author-bios.xhtml#steven-bio">Steven Pemberton</a> (CWI Amsterdam)</p>
                </td>
              </tr>
              
              <tr>
                <td>1100-1130</td>
                <td>Break</td>
              </tr>
              
              <tr>
                <td>1130-1300</td>
                <td>
                  <p><strong>XProc 3.0 from Scratch</strong></p>
                  <p><a href="author-bios.xhtml#achim-bio">Achim Berndzen</a> (&lt;xml-project /&gt;) and <a href="author-bios.xhtml#norm-bio">Norman Walsh</a> (MarkLogic)</p>
                </td>
              </tr>
              
              
              <tr>
                <td>1300-1400</td>
                <td>Lunch</td>
              </tr>
              
              <tr>
                <td>1400-1530</td>
                <td>
                  <p><strong>XProc 3.0 from Scratch</strong> (cont'd)</p>
                  <p><a href="author-bios.xhtml#achim-bio">Achim Berndzen</a> (&lt;xml-project /&gt;) and <a href="author-bios.xhtml#norm-bio">Norman Walsh</a> (MarkLogic)</p>
                </td>
              </tr>
              
              <tr>
                <td>1530-1600</td>
                <td>Break</td>
              </tr>
              
              <tr>
                <td>1600-1730</td>
                <td>
                  <p><strong>Introduction to CSS for Paged Media</strong></p>
                  <p><a href="author-bios.xhtml#tony-bio">Tony Graham</a> (Antenna House)</p>
                  
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#graham0">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="graham0" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content" style="text-align: left;">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">Introduction to CSS for Paged Media</h4>
                        </div>
                        <div class="modal-body">
                          <p>CSS can be used for making pages as well as for styling websites. Many 
                            people are familiar with CSS in the browser: some are very familiar, but 
                            others, not so much. Fewer people, however, are as familiar with using 
                            CSS for paged media.</p>
                            <p>This session takes an eat-your-own-dog-food approach to showing how to 
                            use CSS for paged media. Starting with the HTML text of a tutorial on 
                            using CSS with paged media, the session will progressively add and 
                            explain the CSS styles that are used to format the finished text. By the 
                            end of the session, the fairly undifferentiated mass of text will be 
                            formatted with running headers and footers, page numbers and page number 
                            cross-references, bleeds, CMYK colours, footnotes, top- and 
                            bottom-floats, and other features that appear in paged media but not in 
                            a browser. The session will also describe accessibility features of PDF.</p>
                          <p>Because of the comparatively short duration of the session, there is 
                            only time to cover the CSS features specific to paged media. There will 
                            also not be time for everyone to install AH Formatter at the start of 
                            the session. If you want to perform the steps using your own laptop, it 
                            is necessary to have AH Formatter installed before you come. Evaluation 
                            versions of AH Formatter for Windows (and Windows GUI), MacOS, and Linux 
                            are available from <a href="https://www.antennahouse.com/formatter/">https://www.antennahouse.com/formatter/</a>.</p>
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                  
                </td>
                
              </tr>
              
              
            </tbody>
          </table>
          
          
          
          <table id="saturday">
            <thead>
              <tr>
                <td>Saturday</td>
                <td/>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>0845-0930</td>
                <td> Registration </td>
              </tr>
              <tr>
                <td>0930-1015</td>
                <!-\- Tommie Usdin -\->
                <td>
                  <p><strong>Everyone Knows What a Dragon Looks Like</strong></p>
                  <p><a href="author-bios.xhtml#tommie-bio">B. Tommie Usdin</a> (Mulberry Technologies, Inc.)*</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#usdin1">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="usdin1" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content" style="text-align: left;">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">Everyone Knows What a Dragon Looks Like</h4>
                        </div>
                        <div class="modal-body">
                          <p>We are overwhelmed by competing standards, technologies, and approaches to solving problems we may or may not understand and may or may not have anticipated. Each of us individually, and we as a community, have limited resources and want to concentrate our energies where they are most likely to be successful. Selection from among the cornucopia of options is often made more difficult by our preconceived notions of the shape, source, and promulgator of appropriate technologies. In many cases we seek, and occasionally we find, a powerful tool that seems to address all of our problems. The quest for such tools has led many of us to become standards junkies or technology evangelists. The belief that we have created or identified such a tool leads some of us to become missionaries promoting the use of a standard, a paradigm, or even a tool. In the children's book "Everyone Knows what a Dragon Looks Like", illustrated by Mercer Mayer, Jay Williams raises questions about the recognition and appropriate use of powerful tools. From it, we can learn to be little more skeptical of our ability to know the tools we need when we see them.</p>
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <td>1015-1100</td>
                <!-\- Bredenberg -\->
                <td>
                  <p><strong>Beyond the brick, for the past in the future, you find the archive!</strong></p>
                  <p><a href="author-bios.xhtml#karin-bio">Karin Bredenberg</a> (The Swedish National Archives)*; <a href="author-bios.xhtml#jaime-bio">Jaime Kaminski</a> (University of Brighton)</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#bredenberg1">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="bredenberg1" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content" style="text-align: left;">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">Beyond the brick, for the past in the future, you find the archive!</h4>
                        </div>
                        <div class="modal-body">
                          <p>The statement that XML is dead is as wrong as celebrating Christmas on midsummer night’s eve! Imagine making an archival soup based on international standards using XML, with one municipal archive, two regional archives, five national archives and the European Commission’s eArchiving Building block thrown into the mix. This is what we are going to attempt.</p>
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <td>1100-1130</td>
                <td>Break</td>
              </tr>
              <tr>
                <td>1130-1200</td>
                <!-\- Flynn -\->
                <td>
                  <p><strong>Software we have lost — the mortar that held the bricks together</strong></p>
                  <p><a href="author-bios.xhtml#peter-bio">Peter Flynn</a> (Silmaril Consultants)*</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#flynn1">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="flynn1" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content" style="text-align: left;">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">Software we have lost — the mortar that held the bricks together</h4>
                        </div>
                        <div class="modal-body">
                          <p>Since the first days of SGML, there has been a variety of software to parse, validate, analyse, format, store, search, and extract the information.  Some of this was what we now call Open Source, particularly the utilities, but the majority of applications were normal commercial offerings.</p>
                          <p>In the course of time, many of these have become unavailable, for assorted reasons, with the result is that some very useful systems have been lost, and replacements are not as effective.</p>
                          <p>This research attempts to catalogue and analyse a collection of XML and SGML software that is either off the market, or only available within a different product, and thus not accessible to users.  The objective is to see if there are still ways to “shorten the distance between the bricks” that are not otherwise provided for.</p>
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <td>1200-1230</td>
                <!-\- Imsieke -\->
                <td>
                  <p><strong>xprocedit, A Browser-Based Open-Source XProc Editor</strong></p>
                  <p><a href="author-bios.xhtml#marco-bio">Marco Geue</a> (Hochschule Merseburg); <a href="author-bios.xhtml#gerrit-bio">Gerrit Imsieke</a> (le-tex publishing services GmbH)*</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#imsieke1">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="imsieke1" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content" style="text-align: left;">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">xprocedit, A Browser-Based Open-Source XProc Editor</h4>
                        </div>
                        <div class="modal-body">
                          <p>A visual XProc editor can serve at least two purposes: Communicating the process flow to non-programmers and easing the notoriously steep learning curve for programmers.</p>
                          <p>An implementation using the Javascript framework joint.js and the in-browser XSLT 3 processor Saxon-JS is demonstrated, along with the challenges of supporting XProc’s peculiarities in a generic graph editing framework.</p>
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <td>1230-1300</td>
                <!-\- Bunce -\->
                <td>
                  <p><strong>Generating documents from XQuery annotations</strong></p>
                  <p><a href="author-bios.xhtml#andrew-bio">Andy Bunce</a> (Quodatum Ltd)*</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#bunce1">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="bunce1" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content" style="text-align: left;">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">Generating documents from XQuery annotations</h4>
                        </div>
                        <div class="modal-body">
                          <p>The paper describes an implementation of an xqDoc.org  documentation generator. A focus of this implementation is XQuery annotation support. In 2014 the xqDoc schema was updated to include markup to capture XQuery annotations, however existing renderers have often not been updated to make use of this.</p>
                          <p>A major driver for annotation support is documenting XQuery web applications built using the RESTXQ standard. RESTXQ defines a standard set of XQuery annotations that can be used to define RESTful Web Services from XQuery. Annotations are also being used to define frameworks for unit testing, user permissioning and web socket interfaces. Annotations are code markup that the runtime environment may choose to use to wire-in additional external functionality to XQuery applications.</p>
                          <p>The xqdoc implementation is open source. It is largely written in XQuery and runs with recent versions of BaseX. It generates static, stand alone HTML5 and XML output. The included XQuery library modules can also be used to assist in the generation other related documentation artefacts. In the case of RESTXQ these could be the generation of openAPI(swagger) and WADL documents.</p>
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <td>1300-1400</td>
                <td>Lunch</td>
              </tr>
              <tr>
                <td>1400-1445</td>
                <!-\- Couthures -\->
                <td>
                  <p><strong>XQuery for Data Workers</strong></p>
                  <p><a href="author-bios.xhtml#alain-bio">Alain Couthures</a> (agenceXML)*</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#couthures1">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="couthures1" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content" style="text-align: left;">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">XQuery for Data Workers</h4>
                        </div>
                        <div class="modal-body">
                          <p>A data worker is a running program which manipulates data. It can get data from various sources then transform it and save, or send, the resulting data. A common usage for data workers is interfaces between applications.</p>
                          <p>XQuery is a data-oriented language which is not bound to databases and which is able to format data conveniently as text or XML. Many implementations have added function libraries to access file system, send HTTP requests, and so on... XQuery is a high-level programming language because repetitive operations such as loading a document from anywhere just requires the minimal information to be provided.</p>
                          <p>Considered requirements for a new open source XQuery implementation have been no platform limitation, light deployment, extensibility, asynchronous processing, no big pressure on performance: Javascript+NodeJS has been chosen (with possible, but limited, run within browsers).</p>
                          <p>This implementation is named “Fleur”. It supports XQuery/XQuery Update Facility 3.1 (not full conformance yet) upon its own DOM Level 3 (and browsers DOM). XQuery source is compiled into XQueryX structure which is stored in a Javascript array of arrays.</p>
                          <p>Fleur can process non-XML documents as XML documents with extensions at DOM level. Internally, Fleur manipulates everything as nodes, computed values been always stored into orphan atomic nodes.</p>
                          <p>Parsing/serializing non-XML sources is then implemented just at DOM level according to media-type. Experimentally, CSV files and Excel files are directly loaded into 2-dimension sequences.</p>
                          <p>Fleur CLI includes the possibility of launching an HTTP server. This server executes .xqy pages. XForms, with XSLTForms, can be used to both submit parameters as data to the Worker and render data returned by the Worker.</p>
                          <p>Fleur has already been used in various situations (XLSForm to XForms, dashboards, OFX conversion). Fleur will be integrated in XSLTForms for XForms 2.0 compliance. XForms actions could then be developed with XQuery Update Facility syntax.</p>
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <td>1445-1530</td>
                <!-\- Tai -\->
                <td>
                  <p><strong>Subcheck — a validation framework</strong></p>
                  <p><a href="author-bios.xhtml#andreas-bio">Andreas Tai</a> (IRT - Institut fuer Rundfunktechnik GmbH)*; <a href="author-bios.xhtml#michael-bio">Michael Seiferle</a> (BaseX GmbH)</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#tai1">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="tai1" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content" style="text-align: left;">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">Subcheck — a validation framework</h4>
                        </div>
                        <div class="modal-body">
                          <p>This paper will introduce an operational perspective: how a research question and master thesis ended up in practice and turned into a product. We want to show which requirements led to the solutions, how they were implemented, and which problems still remain to be solved.</p>
                          <p>One of the main application areas of XML is the exchange of data between business partners. The data is in an agreed structured form that will usually be checked at the receiver’s end. It needs to be “validated” such that syntax and values of the data respects rules made in the agreement. But not only the receiver needs to check the data. To avoid rejection by the receiving business partner, the sender might want to verify that the data does not break any of these rules. Often such document data is made not only for one purpose and receiver, different business partners may have overlapping but slightly different rule sets and use-cases.</p>
                          <p>This is especially true with publishing-houses or media companies, where players share lot of the same grammar and constraints on data, yet each format has been enriched with some “house- rules” and recommendations that vary slightly. For instance media subtitles encoded in TTML might be perfectly valid according to a given schema, but still in violation of guidelines, business rules and recommendations.</p>
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <td>1530-1600</td>
                <td>Break</td>
              </tr>
              <tr>
                <td>1600-1645</td>
                <!-\- La Fontaine -\->
                <td>
                  <p><strong>An improved diff3 format for changes and conflicts in tree structures</strong></p>
                  <p><a href="author-bios.xhtml#robin-bio">Robin La Fontaine</a> (DeltaXML Ltd)*; <a href="author-bios.xhtml#nigel-bio">Nigel A Whitaker</a> (DeltaXML Ltd)</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#lafontaine1">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="lafontaine1" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content" style="text-align: left;">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">An improved diff3 format for changes and conflicts in tree structures</h4>
                        </div>
                        <div class="modal-body">
                          <p>There are some pieces of software, and some formats, that are de-facto standards and have been around for decades. One of these is the diff3 format for representing changes and conflicts in text documents. Diff3 works well for unstructured text documents that are divided into lines. It works surprisingly well for pretty-printed source code and similar documents. But it has frustrating limitations when used for XML or JSON or similar tree-based data formats.</p>
                          <p>Can we improve on diff3 without making it too complicated? Can the existing representation of changes and conflicts be extended to handle tree-based data? This paper seeks to answer these questions and to describe how further benefits can be enjoyed by using XML or JSON as the basis for showing conflicts and changes.</p>
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <td>1645-1730</td>
                <!-\- Lumley -\->
                <td>
                  <p><strong>&lt;Angle-brackets/&gt; on the Branch Line - (model) railway engineering with XML technologies</strong></p>
                  <p><a href="author-bios.xhtml#john-bio">John Lumley</a> (jwLResearch)*</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#lumley1">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="lumley1" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content" style="text-align: left;">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">&lt;Angle-brackets/&gt; on the Branch Line - (model) railway engineering with XML technologies</h4>
                        </div>
                        <div class="modal-body">
                          <p>As a retirement 'hobby', somewhat removed from the computing milieu, the author has started building a model railway in his garden. Surveying the extant tools for designing such layouts and finding them not quite right, he started building a design tool himself, using the familiar technologies of XSLT3 and SVG executing in a browser, employing Saxon-JS as the processing platform. The results of this were demonstrated, with some success, at Markup UK in 2018. This paper describes the design of this tool in some detail, as well as developments since that demonstration.
                          </p>
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <td>1800-2100</td>
                <td><strong>Drinks, Dinner, and DemoJam!</strong><br/></td>
              </tr>
            </tbody>
          </table>
          
          
          <table id="sunday">
            <thead>
              <tr>
                <td>Sunday</td>
                <td/>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>0845-0930</td>
                <td>Registration</td>
              </tr>
              <tr>
                <td>0930-1015</td>
                <!-\- Nadolu -\->
                <td>
                  <p><strong>Taking Schematron QuickFix to the Next Level</strong></p>
                  <p><a href="author-bios.xhtml#octavian-bio">Octavian Nadolu</a> (Syncro Soft)*</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#nadolu1">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="nadolu1" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content" style="text-align: left;">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">Taking Schematron QuickFix to the Next Level</h4>
                        </div>
                        <div class="modal-body">
                          <p>The Schematron QuickFix (SQF) language can be used to improve efficiency and quality when editing XML documents. You can define actions that will add complex XML structure in your documents, or make modifications in multiple places, or actions that will convert an XML structure into another. These changes are made by keeping the document structure valid and conforming to your project specification, and will help the content writer add content more easily and without making mistakes.</p>
                          <p>To build complex actions, you can mix Schematron QuickFix language with ISO Schematron, or with different versions of XSLT and XPath, or you can define your own extensions using programming languages such as Java. This means that you can perform modifications in multiple external documents, or display dialog boxes to get input from your users, or use complex algorithms for processing the content of the documents.</p>
                          <p>The Schematron QuickFix is a modular language. Even though it is simple (it only has four types of operations that can be performed: add, delete, replace, and string replace), new types of operations can be created (such as wrap, unwrap, rename, or join). This can be implemented by using abstract quick fixes and by creating libraries of quick fixes that can be reused for various different XML vocabularies (such as DITA, DocBook. TEI). By using a library of quick fixes, it will help the Schematron QuickFix developers to create the actions more easily and reuse the quick fixes created by others.</p>
                          <p>This presentation will focus on some interesting use-cases and Schematron QuickFix examples that can be easily adapted to your projects. The examples will include both abstract quick fixes and complex quick fixes that use XSLT and Java.</p>
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <td>1015-1100</td>
                <!-\- Graham -\->
                <td>
                  <p><strong>Accessibility matters</strong></p>
                  <p><a href="author-bios.xhtml#tony-bio">Tony Graham</a> (Antenna House)*</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#graham1">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="graham1" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content" style="text-align: left;">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">Accessibility matters</h4>
                        </div>
                        <div class="modal-body">
                          <p>XML, by itself, does not have any support for accessibility. XML is extremely flexible, but it needs to flex in the right directions if it is going to support the information necessary to make a document accessible. This session is a guided tour of some of the features of the HTML, Web Content Accessibility Guidelines (WCAG), and PDF/UA (Universal Accessibility) standards. It concentrates on file formats rather than User Agent behaviour, since the information needed to make accessible HTML or PDF usually needs to be included in, or able to be inferred from, the source XML.</p>
                          <p>However, it’s rarely the raw XML that is presented to users. The session will also stray into some aspects of styling the content to make it more accessible.</p>
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <td>1100-1130</td>
                <td>Break</td>
              </tr>
              <tr>
                <td>1130-1200</td>
                <!-\- Davoti -\->
                <td>
                  <p><strong>Scrap the App, Keep the Data</strong></p>
                  <p><a href="author-bios.xhtml#barnabas-bio">Barnabas Davoti</a> (Ovitas AS)*</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#davoti1">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="davoti1" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content" style="text-align: left;">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">Scrap the App, Keep the Data</h4>
                        </div>
                        <div class="modal-body">
                          <p>Whether by reacting swiftly to shifting market conditions and disruptive technologies or by growing through mergers and acquisitions, the ability to adapt is critical to success in the digital age.</p>
                          <p>As business processes and workflows evolve, new technologies and systems are constantly introduced to support them. Over time, IT estates become fragmented, and the number of legacy systems increases year by year. Valuable data ends up in isolated silos, only accessible via unnecessary applications that are expensive to maintain and license or are approaching the end of life.</p>
                          <p>This paper suggests a generic approach to transform arbitrary relational data into aggregated, hierarchical form and build a thin application to provide read access to end users.</p>
                          <p>In my presentation, I would like to point out why the relational model falls short when it comes to data aggregation.</p>
                          <p>XML can easily model both relational and hierarchical data. It's an excellent choice for data re-modeling and also for building a thin, data access application.</p>
                          <p>The approach I want to share with the audience is based on experience from multiple projects. </p>
                          <p>XML "bricks" used in the solution:</p>
                          <ul>
                            <li>processing pipeline configuration as XML (Apache Ant)</li>
                            <li>XSLT</li>
                            <li>XQuery</li>
                            <li>XML Database</li>
                          </ul>
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <td>1200-1230</td>
                <!-\- Siegel -\->
                <td>
                  <p><strong>Documenting XML Structures</strong></p>
                  <p><a href="author-bios.xhtml#erik-bio">Erik Siegel</a> (Xatapult)*</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#siegel1">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="siegel1" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content" style="text-align: left;">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">Documenting XML Structures</h4>
                        </div>
                        <div class="modal-body">
                          <p>There are lots of XML structures that need some kind of end-user documentation to be able to use them effectively. Its not easy to come up with a format that is both easy to understand and easy to create and maintain. Existing software for this is not always helpful. This talk will explore the this subject and look at from various angles.</p>
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <td>1230-1300</td>
                <!-\- Talau -\->
                <td>
                  <p><strong>XMLPaper: XML-based Conference Paper Workflow</strong></p>
                  <p><a href="author-bios.xhtml#cristian-bio">Cristian Talau</a> (Syncro Soft)*</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#talau1">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="talau1" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content" style="text-align: left;">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">XMLPaper: XML-based Conference Paper Workflow</h4>
                        </div>
                        <div class="modal-body">
                          <p>Popular conference management systems are monolithic solutions that are used across many fields and by very diverse audiences. As a result, these systems have rigid technology choices for paper format: PDF, TeX or Word which have limitations compared to a structured format such as XML. In addition, they do not cover all the steps in the paper submission lifecycle such as: collaboration between authors.</p>
                          <p>We propose a new solution for conference paper submission management that tries to improve the user experience in several areas: authors tooling setup, collaboration between authors, multi-step review processes, multi-format proceedings publishing.This paper will present a typical conference paper submission workflow and identify its steps, the stakeholders and the tools and technologies used. We will then present how our solution improves user experience of each of the stakeholders.</p>
                          <p>In this solution, the documents are authored in the an XML format, that supports publishing both as PDF and web portal. The output format is customizable and clearly communicated to authors so that they can preview how the paper will be published. Authors have a very intuitive user interface to draft the paper and to collaborate in cases where a paper has multiple authors. Reviewers can choose to review either the published PDF or directly on the source. In case of multi-round reviews, they can see the changes made between different revisions, thus being able to focus on the last updates.</p>
                          <p>From a technical point of view, the solution is composed from off-the-shelf Web services with a thin layer of orchestration. It may to be used together with a regular Conference Management System, replacing parts of its functionality.</p>
                          <p>To conclude the paper, we analyze how this solution is similar with other workflows related to content creation in a company, such as creating release notes or datasheets for a product.</p>
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <td>1300-1400</td>
                <td>Lunch</td>
              </tr>
              <tr>
                <td>1400-1445</td>
                <!-\- Quin -\->
                <td>
                  <p><strong>Dispelling Myths About Markup Formats</strong></p>
                  <p><a href="author-bios.xhtml#liam-bio">Liam R E Quin</a> (Delightful Computing)*</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#quin1">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="quin1" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content" style="text-align: left;">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">Dispelling Myths About Markup Formats</h4>
                        </div>
                        <div class="modal-body">
                          <p>Misunderstandings about the goals and strengths of different document and data interchange formats can lead to suboptimal decisions. Such misunderstandings appear widespread. The purpose of this paper is to suggest areas in which each format has strengths, and to provide clear explanations that people can use to place XML in the context of other current markup systems.</p>
                          <p>Misconceptions about XML include statements such as “XML was designed for Web services and therefore unsuitable for documents;” “XML was designed to replace HTML and has failed;” “XML cannot transmit semantics of any kind;” “XML is dead.”  In fact, XML is alive and well.</p>
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <td>1445-1530</td>
                <!-\- Bauman -\->
                <td>
                  <p><strong>Validating @selector: a regular expression adventure</strong></p>
                  <p><a href="author-bios.xhtml#syd-bio">Syd Bauman</a> (Northeastern University Digital Scholarship Group)*</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#bauman1">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="bauman1" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content" style="text-align: left;">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">Validating @selector: a regular expression adventure</h4>
                        </div>
                        <div class="modal-body">
                          <p>I needed a way to validate that the value of
                            <code>tei:rendition/@selector</code> was a proper CSS3
                            <strong>selector</strong>. So I wrote a regular expression to
                            do so. An 18,385 character long regular expression. And it seems to
                            work.</p>
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <td>1530-1600</td>
                <td>Break</td>
              </tr>
              <tr>
                <td>1600-1645</td>
                <!-\- Cirulli -\->
                <td>
                  <p><strong>XSpec in the Cloud with Diamonds</strong></p>
                  <p><a href="author-bios.xhtml#sandro-bio">Sandro Cirulli</a> (XSpec)*</p>
                  <!-\- Trigger the modal with a button -\->
                  <button type="button" data-toggle="modal" data-target="#cirulli1">Abstract</button>
                  
                  <!-\- Modal -\->
                  <div class="modal fade" id="cirulli1" role="dialog">
                    <div class="modal-dialog">
                      
                      <!-\- Modal content-\->
                      <div class="modal-content" style="text-align: left;">
                        <div class="modal-header">
                          <button type="button" class="close" data-dismiss="modal"></button>
                          <h4 class="modal-title">XSpec in the Cloud with Diamonds</h4>
                        </div>
                        <div class="modal-body">
                          <p>Running XSpec tests in a development team is usually performed via a CI server/service. However, this comes with limitations related to the use of private repositories and to the cost and burden of administering CI servers.</p>
                          <p>This paper describes an alternative approach for running XSpec tests from private repositories using a serverless architecture built on AWS Lambda. It describes the technical configuration and discusses the benefits, cost optimization, and constraints of a serverless architecture for running XSpec tests.</p>
                        </div>
                        <div class="modal-footer">
                          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                      </div>
                      
                    </div>
                  </div>
                </td>
              </tr>
              <tr>
                <td>1645-1730</td>
                <td>
                  <p><strong>Closing Keynote</strong> and thanks from the organisers</p>
                  <p><a href="author-bios.xhtml#jirka-bio">Jirka Kosek</a> (University of Economics, Prague)</p>
                </td>
              </tr>
              
            </tbody>
          </table>
        </div>-->
      </article>
      
      <!--<article>
        <h1>Conference Program</h1>
        <p class="lead">We are in the process finalizing the programme for Markup UK 2018. To see our exciting speaker lineup, have a look at our <a href="speakers.xhtml">Speaker Page</a>.</p>
      </article>-->
      
      <!--<article>
        <h1>Dates and Deadlines</h1>
        <table>
          <thead>
            <tr>
              <th>Date</th>
              <th>Deadline</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>2018-04-09</td>
              <td>Call for papers ends</td>
            </tr>
            <tr>
              <td>2018-04-30</td>
              <td>Feedback to authors</td>
            </tr>
            <tr>
              <td>2018-05-01</td>
              <td>Early Bird closes</td>
            </tr>
            <tr>
              <td>2018-05-21</td>
              <td>Full papers due</td>
            </tr>
          </tbody>
        </table>
      </article>-->
    </section>